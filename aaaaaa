import { Controller, Get, Param, Query, Res } from '@nestjs/common';
import { Response } from 'express';
import { PmMgrSummService } from './pmMgrSum.service';
import { ApiTags } from '@nestjs/swagger';
import logger from '../common/logger/logger';
const config = require('config');
const flag = config.flag;

@Controller('facade')
@ApiTags('Default')
export class PmMgrSummController {
  constructor(private readonly pmService: PmMgrSummService) {}

  // Get PM Summary for Manager details
  @Get('/mgr/:mgrId/pm/summary')
  async getPmDetails(
    @Param('mgrId') mgrId: string,
    @Query('dueIn') dueIn: string, 
    @Res() res: Response,
  ) {
    try {
      // Determine the base URL based on the config flag
      const baseUrl = flag ? config.iopPmService.url : config.taskService.iopTask;

      // Call the service method to get the details, passing the manager ID and dueIn
      const result = await this.pmService.getDetails(baseUrl, mgrId, dueIn);

      // Return the result with proper status
      return res.status(200).json(result);
    } catch (err) {
      logger.error('Error in getting PM summary', err);
      return res.status(err.status || 500).json({ error: err.message || 'Error in getting PM summary' });
    }
  }
}
-----------------
import { Injectable, HttpException, HttpStatus } from '@nestjs/common';
import { RestClient } from '../common/util/restClient/restClient.service';
const config = require('config');

@Injectable()
export class PmMgrSummService {
  constructor(private readonly restClient: RestClient) {}

  // This service is responsible for getting information from TaskService
  async getDetails(baseUrl: string, mgrId: string, dueIn: string): Promise<any> {
    const headers = {
      Accept: 'application/json',
      'Content-Type': 'application/json',
    };

    // Construct the URL with query parameters
    const url = `${baseUrl}/mgr/${mgrId}/pm/summary`;
    const parameters = { dueIn }; // Prepare the query parameters

    try {
      // Call get1, passing the URL and parameters
      const response = await this.restClient.get1(url, headers, '', {}, parameters).toPromise();
      return response.data; 
    } catch (err) {
      console.error("Error in getting details:", err);
      throw new HttpException(
        { message: 'Error in getting details', error: err.message },
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }
}
