import { Controller, Param, Put, Req, Res } from '@nestjs/common';
import { UpdateTaskService } from './UpdateTask.service';
import { ApiTags } from '@nestjs/swagger';
import logger from '../common/logger/logger';
import { Request, Response } from 'express';

const config = require('config');

@Controller('ioppm')
@ApiTags('Default')
export class UpdateTaskController {
  constructor(private readonly UpdateTaskService: UpdateTaskService) {}

  @Put('/update/pmtasks')
  async putTaskReading(@Req() req: Request, @Res() res: Response) {
    logger.info('Processing request to update PM tasks.');
    logger.debug('Request body:', { body: req.body });
    logger.debug('Request headers:', { headers: req.headers });

    try {
      logger.info('Updating PM task details.');
      const data: any = await this.UpdateTaskService.updateDetails(req);
      logger.debug('Update response:', { data });

      logger.info('Successfully updated PM task details.');
      return res.send(data);
    } catch (err) {
      logger.error('Error in updating PM task.', { errorMessage: err.message, stack: err.stack });
      logger.debug('Error details:', { error: err });
      return res.status(500).json({ message: 'Internal server error', error: err.message });
    }
  }
}
+++
import { Injectable } from '@nestjs/common';
import  UpdateTaskRepo from  './UpdateTask.repo';


@Injectable()
export class UpdateTaskService {

  constructor(private UpdateTaskRepo: UpdateTaskRepo) {}
  async updateDetails(req) {
      try {
        const data = await this.UpdateTaskRepo.updatetask(req);
        const data_json= {"message": "Readings added/updated successfully","pm": req.body.pm}
        return data_json;
      } catch (error) {
        throw error;
      }
}
    }

+++++++
import { Injectable } from '@nestjs/common';
import { Oracle } from '../common/database/oracle';
import { queries } from './UpdateTask.qFactory';

@Injectable()
export default class UpdateTaskRepo {
  constructor(private oraUtil: Oracle) {}

  async updatetask(req: any) {
    try {
      const query1 = queries.updatetask;
      const query2 = queries.updateWidgetDetails;
      const pmtasks = req.body.pm.pmtasks;
      const site_unid = req.body.pm.site_unid;
      const PM_UNID = req.body.pm.pm_unid;
      const META_LAST_UPDATED_BY = req.body.pm.userid;
      const PMD_WIDGET_ID = req.body.pm.pmd_widget_id;
      let result;
      const taskstoupdate=pmtasks.filter(task =>task.isStatusChanged === 1 || task.isCommentChanged===1 || task.status_value);
    
      for (let task of taskstoupdate) {
        let status = task['status'];
        let task_unid = task['task_unid'];
        let comments = task['comments'];
        let specifictask_value=task['specifictask_value'];
        const qParams1 = [status, META_LAST_UPDATED_BY, comments, META_LAST_UPDATED_BY,specifictask_value,task_unid];
        const data: any = await this.oraUtil.executeQuery(query1, qParams1);
        result = data.rowsAffected;
      }
      const qParams2 = [site_unid, PM_UNID, PMD_WIDGET_ID ];
      await this.oraUtil.executeQuery(query2, qParams2);

      return result;
    } catch (error) {
      throw error;
    }
  }
}
+++++++
export const queries = {
  updatetask: `UPDATE opspm.pm_location_task 
    SET STATUS_ID = :STATUS,
    META_LAST_UPDATED_DATE = sys_extract_utc(systimestamp),
    META_LAST_UPDATED_BY = :META_LAST_UPDATED_BY,
    COMMENTS = :COMMENTS,
    STATUSTIMESTAMP = sys_extract_utc(systimestamp),
    STATUSIDSTAMP = :META_LAST_UPDATED_BY,
    SPECIFIC_DATA_VALUE=:SPECIFIC_TASK_VALUE
    WHERE META_UNIVERSAL_ID = :TASK_UNID`,

    updateWidgetDetails: `UPDATE pmd_widget_pm_details w
    SET w.num_of_tasks_done = (
      SELECT COUNT(*)
      FROM opspm.pm_location_task t
      WHERE 
      t.PM_HEADER_ID = w.PM_UNID
      AND t.STATUS_ID != 'I'
    ) WHERE w.pm_unid IN (
    SELECT PM_HEADER_ID FROM OPSPM.pm_location_task WHERE SITE_UNID = :SITE_UNID AND PM_HEADER_ID = :PM_UNID AND PMD_WIDGET_ID = :PMD_WIDGET_ID
    )`
}

TTTTTTTTTTTT
import { Test, TestingModule } from '@nestjs/testing';
import { UpdateTaskController } from './UpdateTask.controller';
import { UpdateTaskService } from './UpdateTask.service';
import { Response, Request } from 'express';

jest.mock('./UpdateTask.service'); // Mocking the service layer

describe('UpdateTaskController', () => {
  let controller: UpdateTaskController;
  let service: UpdateTaskService;
  let req: Request;
  let res: Response;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [UpdateTaskController],
      providers: [UpdateTaskService],
    }).compile();

    controller = module.get<UpdateTaskController>(UpdateTaskController);
    service = module.get<UpdateTaskService>(UpdateTaskService);

    req = {
      body: {
        pm: { pmtasks: [], site_unid: '1', pm_unid: '2', userid: 'user1', pmd_widget_id: '3' },
      },
    } as Request;
    res = { send: jest.fn(), status: jest.fn().mockReturnThis(), json: jest.fn() } as unknown as Response;
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  it('should update PM tasks successfully', async () => {
    const mockResponse = { message: 'Readings added/updated successfully', pm: req.body.pm };
    jest.spyOn(service, 'updateDetails').mockResolvedValue(mockResponse);

    await controller.putTaskReading(req, res);

    expect(res.send).toHaveBeenCalledWith(mockResponse);
  });

  it('should handle error during update PM tasks', async () => {
    const error = new Error('Internal server error');
    jest.spyOn(service, 'updateDetails').mockRejectedValue(error);

    await controller.putTaskReading(req, res);

    expect(res.status).toHaveBeenCalledWith(500);
    expect(res.json).toHaveBeenCalledWith({ message: 'Internal server error', error: error.message });
  });
});
+++++++++++
import { Test, TestingModule } from '@nestjs/testing';
import { UpdateTaskService } from './UpdateTask.service';
import UpdateTaskRepo from './UpdateTask.repo';

jest.mock('./UpdateTask.repo'); // Mocking the repository layer

describe('UpdateTaskService', () => {
  let service: UpdateTaskService;
  let repo: UpdateTaskRepo;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [UpdateTaskService, UpdateTaskRepo],
    }).compile();

    service = module.get<UpdateTaskService>(UpdateTaskService);
    repo = module.get<UpdateTaskRepo>(UpdateTaskRepo);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  it('should successfully update PM tasks', async () => {
    const req = { body: { pm: { pmtasks: [], site_unid: '1', pm_unid: '2', userid: 'user1', pmd_widget_id: '3' } } };
    const mockResult = { message: 'Readings added/updated successfully', pm: req.body.pm };
    
    jest.spyOn(repo, 'updatetask').mockResolvedValue(1); // Mocking the repo's method
    const result = await service.updateDetails(req);

    expect(result).toEqual(mockResult);
  });

  it('should handle error if the repository fails', async () => {
    const req = { body: { pm: { pmtasks: [], site_unid: '1', pm_unid: '2', userid: 'user1', pmd_widget_id: '3' } } };
    const error = new Error('Repository Error');

    jest.spyOn(repo, 'updatetask').mockRejectedValue(error);

    await expect(service.updateDetails(req)).rejects.toThrow(error);
  });
});
+++++++
import { Test, TestingModule } from '@nestjs/testing';
import UpdateTaskRepo from './UpdateTask.repo';
import { Oracle } from '../common/database/oracle';
import { queries } from './UpdateTask.qFactory';

jest.mock('../common/database/oracle'); // Mocking the Oracle class

describe('UpdateTaskRepo', () => {
  let repo: UpdateTaskRepo;
  let oracle: Oracle;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [UpdateTaskRepo, Oracle],
    }).compile();

    repo = module.get<UpdateTaskRepo>(UpdateTaskRepo);
    oracle = module.get<Oracle>(Oracle);
  });

  it('should be defined', () => {
    expect(repo).toBeDefined();
  });

  it('should update PM tasks and return affected rows', async () => {
    const req = {
      body: {
        pm: { pmtasks: [{ task_unid: '1', status: 'Completed', isStatusChanged: 1 }], site_unid: '1', pm_unid: '2', userid: 'user1', pmd_widget_id: '3' },
      },
    };
    const mockResult = { rowsAffected: 1 };

    jest.spyOn(oracle, 'executeQuery').mockResolvedValue(mockResult);

    const result = await repo.updatetask(req);

    expect(result).toBe(1); // Expecting the rowsAffected value
  });

  it('should throw error when the query fails', async () => {
    const req = {
      body: { pm: { pmtasks: [{ task_unid: '1', status: 'Completed', isStatusChanged: 1 }], site_unid: '1', pm_unid: '2', userid: 'user1', pmd_widget_id: '3' } },
    };
    const error = new Error('Database query failed');

    jest.spyOn(oracle, 'executeQuery').mockRejectedValue(error);

    await expect(repo.updatetask(req)).rejects.toThrow(error);
  });
});
