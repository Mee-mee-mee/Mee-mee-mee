import { Controller, Param, Put, Req, Res } from '@nestjs/common';
import { UpdateSwitchTaskService } from './updateSwitchTask.service';
import { ApiTags } from '@nestjs/swagger';
import logger from '../common/logger/logger';
import { Request, Response } from 'express';

const config = require('config');

@Controller('ioppm')
@ApiTags('Default')
export class updateSwitchTaskController {
  constructor(private readonly UpdateSwitchTaskService: UpdateSwitchTaskService) {}

  @Put('/switch/update/pmtasks')
  async updateSwitch(@Req() req: Request, @Res() res: Response) {
    logger.info('Processing request to update switch PM tasks.');
    logger.debug('Request body:', { body: req.body });
    logger.debug('Request headers:', { headers: req.headers });

    try {
      logger.info('Updating switch PM task details.');
      const data: any = await this.UpdateSwitchTaskService.updateDetails(req);
      logger.debug('Update response:', { data });

      logger.info('Successfully updated switch PM task details.');
      return res.send(data);
    } catch (err) {
      logger.error('Error in updating Task Details.', { errorMessage: err.message, stack: err.stack });
      logger.debug('Error details:', { error: err });
      return res.status(500).json({ message: 'Internal server error', error: err.message });
    }
  }
}
=========
import { Injectable } from '@nestjs/common';
import UpdateSwitchTaskRepo from './updateSwitchTask.repo';


@Injectable()
export class UpdateSwitchTaskService {

  constructor(private UpdateSwitchTaskRepo: UpdateSwitchTaskRepo) {}
  async updateDetails(req) {
      try {
        const data = await this.UpdateSwitchTaskRepo.updateswitchrepo(req);
        const data_json= {"message": "PM tasks updated successfully","pm": req.body.pm}
        return data_json;
  
      } catch (error) {
        throw error;
      }
}
    }
======
import { Injectable } from '@nestjs/common';
import  {Oracle}  from '../common/database/oracle';
import { queries } from './updateSwitchTask.qFactory';

@Injectable()
export default class UpdateSwitchTaskRepo {
  constructor(private oraUtil: Oracle) {}

  async updateswitchrepo(req: any){
    try{
      const query1 = queries.updatetask;
      const query2 = queries.updateWidgetDetails;
      const pmtasks = req.body.pm.pmtasks;
      const META_LAST_UPDATED_BY= req.body.pm.userid;
      const switch_unid = req.body.pm.switch_unid;
      const PM_UNID = req.body.pm.pm_unid;
      let result;
      
      const taskstoupdate=pmtasks.filter(task => task.isStatusChanged===1||task.isCommentChanged===1||(typeof task['status_value']==="number"));
  
      for (let task of taskstoupdate) {
       
          let status=task['status'];
          let task_unid = task['task_unid'];
          let comments = task['comments'];
          let specifictask_value=task['specifictask_value'];
          const qParams1=[status,META_LAST_UPDATED_BY,comments, specifictask_value, META_LAST_UPDATED_BY,task_unid,switch_unid];
          const data: any=await this.oraUtil.executeQuery(query1,qParams1);
          result=data.rowsAffected;
        
      }
      const qParams2 = [switch_unid, PM_UNID];
      await this.oraUtil.executeQuery(query2, qParams2);
      return result;
    } catch (error) {
      throw error;
    }
}
}
=======export const queries={
        updatetask: `
        UPDATE opspm.pm_location_task t
        SET t.STATUS_ID = :STATUS,
        t.META_LAST_UPDATED_DATE = sys_extract_utc(systimestamp),
        t.META_LAST_UPDATED_BY = :META_LAST_UPDATED_BY,
        t.COMMENTS = :COMMENTS,
        SPECIFIC_DATA_VALUE=:SPECIFIC_TASK_VALUE,
        t.STATUSTIMESTAMP = sys_extract_utc(systimestamp),
        t.STATUSIDSTAMP = :META_LAST_UPDATED_BY
        WHERE META_UNIVERSAL_ID = :TASK_UNID 
        AND SWITCH_UNID = :SWITCH_UNID`,
        
        updateWidgetDetails: `UPDATE pmd_widget_pm_details w
        SET w.num_of_tasks_done = (
          SELECT COUNT(*)
          FROM opspm.pm_location_task t
          WHERE 
          t.PM_HEADER_ID = w.PM_UNID
          AND t.STATUS_ID != 'I'
        )
           WHERE w.pm_unid IN (
        SELECT PM_HEADER_ID FROM OPSPM.pm_location_task WHERE SWITCH_UNID = :SWITCH_UNID AND PM_HEADER_ID = :PM_UNID
        )`
}
TTTTTTTTTTTTTTTTT
import { Test, TestingModule } from '@nestjs/testing';
import { updateSwitchTaskController } from './updateSwitchTask.controller';
import { UpdateSwitchTaskService } from './updateSwitchTask.service';
import { Response, Request } from 'express';

jest.mock('./updateSwitchTask.service');

describe('updateSwitchTaskController', () => {
  let controller: updateSwitchTaskController;
  let service: UpdateSwitchTaskService;
  let req: Request;
  let res: Response;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [updateSwitchTaskController],
      providers: [UpdateSwitchTaskService],
    }).compile();

    controller = module.get<updateSwitchTaskController>(updateSwitchTaskController);
    service = module.get<UpdateSwitchTaskService>(UpdateSwitchTaskService);

    req = { body: { pm: { pmtasks: [], userid: 'user1', switch_unid: '1', pm_unid: '2' } } } as Request;
    res = { send: jest.fn(), status: jest.fn().mockReturnThis(), json: jest.fn() } as unknown as Response;
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  it('should update PM tasks successfully', async () => {
    const mockResponse = { message: 'PM tasks updated successfully', pm: req.body.pm };
    jest.spyOn(service, 'updateDetails').mockResolvedValue(mockResponse);

    await controller.updateSwitch(req, res);

    expect(res.send).toHaveBeenCalledWith(mockResponse);
  });

  it('should handle error when updating PM tasks', async () => {
    const error = new Error('Internal server error');
    jest.spyOn(service, 'updateDetails').mockRejectedValue(error);

    await controller.updateSwitch(req, res);

    expect(res.status).toHaveBeenCalledWith(500);
    expect(res.json).toHaveBeenCalledWith({ message: 'Internal server error', error: error.message });
  });
});
==============
import { Test, TestingModule } from '@nestjs/testing';
import { UpdateSwitchTaskService } from './updateSwitchTask.service';
import UpdateSwitchTaskRepo from './updateSwitchTask.repo';

jest.mock('./updateSwitchTask.repo');

describe('UpdateSwitchTaskService', () => {
  let service: UpdateSwitchTaskService;
  let repo: UpdateSwitchTaskRepo;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [UpdateSwitchTaskService, UpdateSwitchTaskRepo],
    }).compile();

    service = module.get<UpdateSwitchTaskService>(UpdateSwitchTaskService);
    repo = module.get<UpdateSwitchTaskRepo>(UpdateSwitchTaskRepo);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  it('should update PM tasks and return a success message', async () => {
    const req = { body: { pm: { pmtasks: [], userid: 'user1', switch_unid: '1', pm_unid: '2' } } };
    const mockResult = { message: 'PM tasks updated successfully', pm: req.body.pm };
    
    jest.spyOn(repo, 'updateswitchrepo').mockResolvedValue(1);  // Mocking the repo method
    const result = await service.updateDetails(req);

    expect(result).toEqual(mockResult);
  });

  it('should throw an error if the repository fails', async () => {
    const req = { body: { pm: { pmtasks: [], userid: 'user1', switch_unid: '1', pm_unid: '2' } } };
    const error = new Error('Repo Error');
    
    jest.spyOn(repo, 'updateswitchrepo').mockRejectedValue(error);

    await expect(service.updateDetails(req)).rejects.toThrow(error);
  });
});
=====
import { Test, TestingModule } from '@nestjs/testing';
import UpdateSwitchTaskRepo from './updateSwitchTask.repo';
import { Oracle } from '../common/database/oracle';
import { queries } from './updateSwitchTask.qFactory';

jest.mock('../common/database/oracle');

describe('UpdateSwitchTaskRepo', () => {
  let repo: UpdateSwitchTaskRepo;
  let oracle: Oracle;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [UpdateSwitchTaskRepo, Oracle],
    }).compile();

    repo = module.get<UpdateSwitchTaskRepo>(UpdateSwitchTaskRepo);
    oracle = module.get<Oracle>(Oracle);
  });

  it('should be defined', () => {
    expect(repo).toBeDefined();
  });

  it('should update PM tasks successfully', async () => {
    const mockData = { rowsAffected: 1 };
    const req = { body: { pm: { pmtasks: [{ isStatusChanged: 1, task_unid: 'task1', status: 'completed', comments: 'Task completed' }], userid: 'user1', switch_unid: '1', pm_unid: '2' } } };
    jest.spyOn(oracle, 'executeQuery').mockResolvedValue(mockData);

    const result = await repo.updateswitchrepo(req);

    expect(result).toEqual(1);  // We expect the result to be 1 because rowsAffected is 1
  });

  it('should throw an error if the database query fails', async () => {
    const error = new Error('Database query failed');
    const req = { body: { pm: { pmtasks: [{ isStatusChanged: 1, task_unid: 'task1', status: 'completed', comments: 'Task completed' }], userid: 'user1', switch_unid: '1', pm_unid: '2' } } };
    jest.spyOn(oracle, 'executeQuery').mockRejectedValue(error);

    await expect(repo.updateswitchrepo(req)).rejects.toThrow(error);
  });
});
