SELECT DISTINCT a.STATUS_ID
FROM opspm.PM_TASK_AVAILABLE_STATUS_ITEM a
JOIN OPSPM.PM_LOCATION_TASK b
ON a.TASK_ID = b.TASK_ID
WHERE b.PM_HEADER_ID = '59B52A661D399EE671317A3A7EEBDF51'
order by a.STATUS_ID;

























export const queries = {
    getPmMgrSumm: `
        SELECT 
          plt.TECHNICIAN_ID AS techid,
          pmd.NUM_OF_TASKS AS numtasks,
          pmd.NUM_OF_TASKS_DONE AS numtasksdone,
          plt.PM_TASK_STOP_TIME AS pm_task_stop_time,
          CASE
            WHEN :duein = '30' THEN SYSDATE + 30
            WHEN :duein = '60' THEN SYSDATE + 60
            WHEN :duein = '90' THEN SYSDATE + 90
            WHEN :duein = '180' THEN SYSDATE + 180
            WHEN :duein = 'eoy' THEN TO_DATE('31-DEC-' || TO_CHAR(SYSDATE, 'YYYY'), 'DD-MON-YYYY')
          END AS dueDate,
          CASE
            WHEN plt.PM_TASK_STOP_TIME <= 
                CASE
                  WHEN :duein = '30' THEN SYSDATE + 30
                  WHEN :duein = '60' THEN SYSDATE + 60
                  WHEN :duein = '90' THEN SYSDATE + 90
                  WHEN :duein = '180' THEN SYSDATE + 180
                  WHEN :duein = 'eoy' THEN TO_DATE('31-DEC-' || TO_CHAR(SYSDATE, 'YYYY'), 'DD-MON-YYYY')
                END
            THEN :duein
          END AS duein
        FROM 
          PMD_WIDGET_PM_DETAILS pmd
        LEFT JOIN 
          opspm.PM_LOCATION_TASK plt ON pmd.SITE_UNID = plt.SITE_UNID
           LEFT JOIN
        opsinv.SITE_DATA_NEW st ON st.META_UNIVERSALID=plt.SITE_UNID
        WHERE 
          plt.MANAGER_ID   = :mgrid
        AND 
          plt.PM_TASK_STOP_TIME <= 
            CASE
              WHEN :duein = '30' THEN SYSDATE + 30
              WHEN :duein = '60' THEN SYSDATE + 60
              WHEN :duein = '90' THEN SYSDATE + 90
              WHEN :duein = '180' THEN SYSDATE + 180
              WHEN :duein = 'eoy' THEN TO_DATE('31-DEC-' || TO_CHAR(SYSDATE, 'YYYY'), 'DD-MON-YYYY')
            END`,
};


====================
import { Controller, Param, Get, Query, Req, Res } from '@nestjs/common';
import { PmMgrSummService } from './pmMgrSumm.service';
import { ApiTags } from '@nestjs/swagger';
import logger from '../common/logger/logger';
import { Request, Response } from 'express';

@Controller('ioppm')
@ApiTags('Default')
export class PmMgrSummController {
    constructor(private readonly pmMgrSummService: PmMgrSummService) { }

    // Get PM Summary for Manager details
    @Get('/mgr/:mgrId/pm/summary')
    async getTasksByPm(
        @Param('mgrId') mgrId: string,
        @Query('duein') duein: string,
        @Req() req: Request,
        @Res() res: Response,
    ) {
        try {
            const pmData = await this.pmMgrSummService.PmData(mgrId, duein);
            if (pmData.taskcounts.length === 0) {
                return res.status(204).send();
            }
            return res.json(pmData);
        } catch (err) {
            logger.error('Not able to get Summary of Manager for PM', err);
            return res.status(500).json({ message: 'Internal server error', error: err });
        }
    }
}
===============
import { Injectable } from '@nestjs/common';
import PmMgrRepo from './pmMgrSumm.repo';

@Injectable()
export class PmMgrSummService {
    constructor(private readonly pmMgrRepo: PmMgrRepo) { }

    async PmData(mgrid: string, duein: string) {
        try {
            const data = await this.pmMgrRepo.getPmMgrSumm(mgrid, duein);
            const transformedData = data.map((site: any) => {
                const totalTasks = site.numtasks || 0;
                const doneTasks = site.numtasksdone || 0;
                const perc = totalTasks > 0 ? (doneTasks / totalTasks) * 100 : 100;
                const tasks = [
                    {
                        duein: site.duein,
                        pm: {
                            total: totalTasks,
                            done: doneTasks,
                            perc: perc,
                        },
                    },
                ];
                return {
                    techid: site.techid,
                    tasks: tasks,
                };
            });
            console.log('before transformed data', transformedData);
            return { taskcounts: transformedData };
        } catch (error) {
            throw error;
        }
    }
}


================


import { Injectable } from '@nestjs/common';
import { Oracle } from '../common/database/oracle';
import { queries } from './pmMgrSumm.qfactory';

@Injectable()
export default class PmMgrRepo {
    constructor(private oraUtil: Oracle) { }

    async getPmMgrSumm(mgrid: string, duein: string) {
        try {
            const query = queries.getPmMgrSumm;
            console.log('Due value', duein);
            const qParams = {
                mgrid: mgrid,
                duein: duein,
            };

            let data: any = await this.oraUtil.executeQuery(query, qParams);

            data = data.rows;
            data = data.map((item) => {
                const lowerCaseItem = {};
                Object.keys(item).forEach((key) => {
                    lowerCaseItem[key.toLowerCase()] = item[key];
                });
                return lowerCaseItem;
            });

            return data;
        } catch (error) {
            throw error;
        }
    }
}
##########################
import { Test, TestingModule } from '@nestjs/testing';
import { PmMgrSummController } from './pmMgrSumm.controller';
import { PmMgrSummService } from './pmMgrSumm.service';
import { Request, Response } from 'express';

describe('PmMgrSummController', () => {
    let controller: PmMgrSummController;
    let service: PmMgrSummService;

    const mockService = {
        PmData: jest.fn(),
    };

    beforeEach(async () => {
        const module: TestingModule = await Test.createTestingModule({
            controllers: [PmMgrSummController],
            providers: [{ provide: PmMgrSummService, useValue: mockService }],
        }).compile();

        controller = module.get<PmMgrSummController>(PmMgrSummController);
        service = module.get<PmMgrSummService>(PmMgrSummService);
    });

    it('should be defined', () => {
        expect(controller).toBeDefined();
    });

    describe('getTasksByPm', () => {
        it('should return task data', async () => {
            const req = {} as Request;
            const res = { json: jest.fn(), status: jest.fn().mockReturnThis() } as unknown as Response;
            const mgrId = '123';
            const duein = 'someDueIn';
            const pmData = { taskcounts: [{ techid: 'tech1', tasks: [] }] };

            mockService.PmData.mockResolvedValue(pmData);

            await controller.getTasksByPm(mgrId, duein, req, res);

            expect(res.json).toHaveBeenCalledWith(pmData);
            expect(res.status).not.toHaveBeenCalledWith(204);
        });

        it('should return 204 if no task counts', async () => {
            const req = {} as Request;
            const res = { status: jest.fn().mockReturnThis(), send: jest.fn() } as unknown as Response;
            const mgrId = '123';
            const duein = 'someDueIn';
            const pmData = { taskcounts: [] };

            mockService.PmData.mockResolvedValue(pmData);

            await controller.getTasksByPm(mgrId, duein, req, res);

            expect(res.status).toHaveBeenCalledWith(204);
            expect(res.send).toHaveBeenCalled();
        });

        it('should return 500 on error', async () => {
            const req = {} as Request;
            const res = { status: jest.fn().mockReturnThis(), json: jest.fn() } as unknown as Response;
            const mgrId = '123';
            const duein = 'someDueIn';

            mockService.PmData.mockRejectedValue(new Error('Some error'));

            await controller.getTasksByPm(mgrId, duein, req, res);

            expect(res.status).toHaveBeenCalledWith(500);
            expect(res.json).toHaveBeenCalledWith({ message: 'Internal server error', error: expect.any(Error) });
        });
    });
});
============

import { Test, TestingModule } from '@nestjs/testing';
import { PmMgrSummService } from './pmMgrSumm.service';
import PmMgrRepo from './pmMgrSumm.repo';

describe('PmMgrSummService', () => {
    let service: PmMgrSummService;
    let repo: PmMgrRepo;

    const mockRepo = {
        getPmMgrSumm: jest.fn(),
    };

    beforeEach(async () => {
        const module: TestingModule = await Test.createTestingModule({
            providers: [{ provide: PmMgrSummRepo, useValue: mockRepo }],
        }).compile();

        service = module.get<PmMgrSummService>(PmMgrSummService);
        repo = module.get<PmMgrRepo>(PmMgrRepo);
    });

    it('should be defined', () => {
        expect(service).toBeDefined();
    });

    describe('PmData', () => {
        it('should return transformed data', async () => {
            const mgrid = '123';
            const duein = 'someDueIn';
            const mockData = [
                { techid: 'tech1', numtasks: 10, numtasksdone: 5, duein: '2024-10-10' },
            ];

            mockRepo.getPmMgrSumm.mockResolvedValue(mockData);

            const result = await service.PmData(mgrid, duein);

            expect(result).toEqual({
                taskcounts: [{
                    techid: 'tech1',
                    tasks: [{
                        duein: '2024-10-10',
                        pm: {
                            total: 10,
                            done: 5,
                            perc: 50,
                        },
                    }],
                }],
            });
        });

        it('should handle empty data', async () => {
            const mgrid = '123';
            const duein = 'someDueIn';

            mockRepo.getPmMgrSumm.mockResolvedValue([]);

            const result = await service.PmData(mgrid, duein);

            expect(result).toEqual({ taskcounts: [] });
        });

        it('should throw error if repo fails', async () => {
            const mgrid = '123';
            const duein = 'someDueIn';

            mockRepo.getPmMgrSumm.mockRejectedValue(new Error('Some error'));

            await expect(service.PmData(mgrid, duein)).rejects.toThrow('Some error');
        });
    });
});
=============
import { Test, TestingModule } from '@nestjs/testing';
import PmMgrRepo from './pmMgrSumm.repo';
import { Oracle } from '../common/database/oracle';

describe('PmMgrRepo', () => {
    let repo: PmMgrRepo;
    let oraUtil: Oracle;

    const mockOracle = {
        executeQuery: jest.fn(),
    };

    beforeEach(async () => {
        const module: TestingModule = await Test.createTestingModule({
            providers: [{ provide: Oracle, useValue: mockOracle }, PmMgrRepo],
        }).compile();

        repo = module.get<PmMgrRepo>(PmMgrRepo);
        oraUtil = module.get<Oracle>(Oracle);
    });

    it('should be defined', () => {
        expect(repo).toBeDefined();
    });

    describe('getPmMgrSumm', () => {
        it('should return formatted data', async () => {
            const mgrid = '123';
            const duein = 'someDueIn';
            const mockData = {
                rows: [
                    { TECHID: 'tech1', NUMTASKS: 10, NUMTASKSDONE: 5 },
                ],
            };

            mockOracle.executeQuery.mockResolvedValue(mockData);

            const result = await repo.getPmMgrSumm(mgrid, duein);

            expect(result).toEqual([{ techid: 'tech1', numtasks: 10, numtasksdone: 5 }]);
        });

        it('should throw error if query fails', async () => {
            const mgrid = '123';
            const duein = 'someDueIn';

            mockOracle.executeQuery.mockRejectedValue(new Error('Some error'));

            await expect(repo.getPmMgrSumm(mgrid, duein)).rejects.toThrow('Some error');
        });
    });
});

-----------------------
providers: [
    PmMgrSummService,  // Ensure the service is provided correctly
    {
        provide: PmMgrRepo,  // Corrected from PmMgrSummRepo to PmMgrRepo
        useValue: mockRepo,
    },
],
