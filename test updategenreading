import { Test, TestingModule } from '@nestjs/testing';
import { UpdateGenReadingRepo } from './updategenreading.repo';
import { Oracle } from '../common/database/oracle';
import { queries } from './updategenreading.qFactory';

// Mocking the Oracle utility class
jest.mock('../common/database/oracle');
const mockExecuteQuery = jest.fn();

describe('UpdateGenReadingRepo', () => {
  let repo: UpdateGenReadingRepo;
  let oraUtil: Oracle;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UpdateGenReadingRepo,
        {
          provide: Oracle,
          useValue: {
            executeQuery: mockExecuteQuery, // Mocking executeQuery method
          },
        },
      ],
    }).compile();

    repo = module.get<UpdateGenReadingRepo>(UpdateGenReadingRepo);
    oraUtil = module.get<Oracle>(Oracle);
  });

  afterEach(() => {
    jest.clearAllMocks(); // Clear mocks after each test
  });

  it('should be defined', () => {
    expect(repo).toBeDefined();
  });

  it('should call executeQuery to update readings and fetch metadata', async () => {
    const reqBody = {
      pm_unid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: [
        {
          ac_voltage: '24.10',
          ac_current: '72.00',
          oil_level: '0.25',
          fuel_level1: '0.87',
          fuel_level2: '0.00',
          fuel_level3: '0.00',
          fuel_level4: '0.00',
          totalruntime: '123',
        },
      ],
    };

    const mockFetchData = {
      rows: [
        {
          META_CREATED_BY: 'rhymeri',
          META_CREATED_DATE: '2023-02-03 11:54:03',
          META_LAST_UPDATED_BY: 'collja',
          META_LAST_UPDATED_DATE: '2024-11-10 23:42:47',
        },
      ],
    };

    // Mocking the first executeQuery (for update) and the second one (for fetch)
    mockExecuteQuery.mockResolvedValueOnce([]); // Mock the update query
    mockExecuteQuery.mockResolvedValueOnce(mockFetchData); // Mock the fetch query

    const result = await repo.updategenreading(reqBody);

    // Expect the executeQuery to have been called twice
    expect(mockExecuteQuery).toHaveBeenCalledTimes(2);

    // Check the result for the updated readings and metadata
    expect(result).toEqual([
      {
        ac_voltage: '24.10',
        ac_current: '72.00',
        oil_level: '0.25',
        fuel_level1: '0.87',
        fuel_level2: '0.00',
        fuel_level3: '0.00',
        fuel_level4: '0.00',
        totalruntime: '123',
        meta_createdby: 'rhymeri',
        meta_createddate: '2023-02-03 11:54:03',
        meta_lastupdateby: 'collja',
        meta_lastupdatedate: '2024-11-10 23:42:47',
      },
    ]);
  });

  it('should throw an error if query execution fails', async () => {
    const reqBody = {
      pm_unid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: [
        {
          ac_voltage: '24.10',
          ac_current: '72.00',
          oil_level: '0.25',
          fuel_level1: '0.87',
          fuel_level2: '0.00',
          fuel_level3: '0.00',
          fuel_level4: '0.00',
          totalruntime: '123',
        },
      ],
    };

    // Mocking the executeQuery to throw an error
    mockExecuteQuery.mockRejectedValue(new Error('Query execution failed'));

    // Expecting the method to throw an error when query fails
    await expect(repo.updategenreading(reqBody)).rejects.toThrow('Database query failed: Query execution failed');
  });
});


RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

import { Test, TestingModule } from '@nestjs/testing';
import { UpdateGenReadingRepo } from './updategenreading.repo';
import { Oracle } from '../common/database/oracle';
import { queries } from './updategenreading.qFactory';

// Mocking the Oracle utility class
jest.mock('../common/database/oracle');
const mockExecuteQuery = jest.fn();

describe('UpdateGenReadingRepo', () => {
  let repo: UpdateGenReadingRepo;
  let oraUtil: Oracle;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UpdateGenReadingRepo,
        {
          provide: Oracle,
          useValue: {
            executeQuery: mockExecuteQuery, // Mocking executeQuery method
          },
        },
      ],
    }).compile();

    repo = module.get<UpdateGenReadingRepo>(UpdateGenReadingRepo);
    oraUtil = module.get<Oracle>(Oracle);
  });

  afterEach(() => {
    jest.clearAllMocks(); // Clear mocks after each test
  });

  it('should be defined', () => {
    expect(repo).toBeDefined();
  });

  it('should call executeQuery to update readings and fetch metadata', async () => {
    const reqBody = {
      pm_unid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: [
        {
          ac_voltage: '24.10',
          ac_current: '72.00',
          oil_level: '0.25',
          fuel_level1: '0.87',
          fuel_level2: '0.00',
          fuel_level3: '0.00',
          fuel_level4: '0.00',
          totalruntime: '123',
        },
      ],
    };

    const mockFetchData = {
      rows: [
        {
          META_CREATED_BY: 'rhymeri',
          META_CREATED_DATE: '2023-02-03 11:54:03',
          META_LAST_UPDATED_BY: 'collja',
          META_LAST_UPDATED_DATE: '2024-11-10 23:42:47',
        },
      ],
    };

    // Mocking the first executeQuery (for update) and the second one (for fetch)
    mockExecuteQuery.mockResolvedValueOnce([]); // Mock the update query
    mockExecuteQuery.mockResolvedValueOnce(mockFetchData); // Mock the fetch query

    const result = await repo.updategenreading(reqBody);

    // Expect the executeQuery to have been called twice
    expect(mockExecuteQuery).toHaveBeenCalledTimes(2);

    // Check the result for the updated readings and metadata
    expect(result).toEqual([
      {
        ac_voltage: '24.10',
        ac_current: '72.00',
        oil_level: '0.25',
        fuel_level1: '0.87',
        fuel_level2: '0.00',
        fuel_level3: '0.00',
        fuel_level4: '0.00',
        totalruntime: '123',
        meta_createdby: 'rhymeri',
        meta_createddate: '2023-02-03 11:54:03',
        meta_lastupdateby: 'collja',
        meta_lastupdatedate: '2024-11-10 23:42:47',
      },
    ]);
  });

  it('should throw an error if query execution fails', async () => {
    const reqBody = {
      pm_unid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: [
        {
          ac_voltage: '24.10',
          ac_current: '72.00',
          oil_level: '0.25',
          fuel_level1: '0.87',
          fuel_level2: '0.00',
          fuel_level3: '0.00',
          fuel_level4: '0.00',
          totalruntime: '123',
        },
      ],
    };

    // Mocking the executeQuery to throw an error
    mockExecuteQuery.mockRejectedValue(new Error('Query execution failed'));

    // Expecting the method to throw an error when query fails
    await expect(repo.updategenreading(reqBody)).rejects.toThrowError('Database query failed: Query execution failed');
  });
});


aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

import { Test, TestingModule } from '@nestjs/testing';
import { UpdateGenReadingRepo } from './updategenreading.repo';
import { Oracle } from '../common/database/oracle';
import { queries } from './updategenreading.qFactory';

describe('UpdateGenReadingRepo', () => {
  let repo: UpdateGenReadingRepo;
  let oraUtil: Oracle;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UpdateGenReadingRepo,
        {
          provide: Oracle,
          useValue: {
            executeQuery: jest.fn(),
          },
        },
      ],
    }).compile();

    repo = module.get<UpdateGenReadingRepo>(UpdateGenReadingRepo);
    oraUtil = module.get<Oracle>(Oracle);
  });

  it('should be defined', () => {
    expect(repo).toBeDefined();
  });

  it('should call executeQuery to update readings and fetch metadata', async () => {
    const reqBody = {
      pm_unid: '4F97CD39DE06DCAB696F151C3F92E508', // Correct field name used here
      userid: 'collja',
      readings: [
        {
          ac_voltage: '24.10',
          ac_current: '72.00',
          oil_level: '0.25',
          fuel_level1: '0.87',
          fuel_level2: '0.00',
          fuel_level3: '0.00',
          fuel_level4: '0.00',
          totalruntime: '123',
        },
      ],
    };

    const mockFetchData = {
      rows: [
        {
          META_CREATED_BY: 'rhymeri',
          META_CREATED_DATE: '2023-02-03 11:54:03',
          META_LAST_UPDATED_BY: 'collja',
          META_LAST_UPDATED_DATE: '2024-11-10 23:42:47',
        },
      ],
    };

    jest.spyOn(oraUtil, 'executeQuery')
      .mockResolvedValueOnce([]) // Mock the update query
      .mockResolvedValueOnce(mockFetchData); // Mock the fetch query

    const result = await repo.updategenreading(reqBody);

    expect(oraUtil.executeQuery).toHaveBeenCalledTimes(2);
    expect(result).toEqual([
      {
        ac_voltage: '24.10',
        ac_current: '72.00',
        oil_level: '0.25',
        fuel_level1: '0.87',
        fuel_level2: '0.00',
        fuel_level3: '0.00',
        fuel_level4: '0.00',
        totalruntime: '123',
        meta_createdby: 'rhymeri',
        meta_createddate: '2023-02-03 11:54:03',
        meta_lastupdateby: 'collja',
        meta_lastupdatedate: '2024-11-10 23:42:47',
      },
    ]);
  });

  it('should throw an error if query execution fails', async () => {
    const reqBody = { pm_unid: '4F97CD39DE06DCAB696F151C3F92E508', userid: 'collja', readings: [] };

    // Mock rejection for the executeQuery method to simulate a failure
    jest.spyOn(oraUtil, 'executeQuery').mockRejectedValueOnce(new Error('Query execution failed'));

    // Make sure that the updategenreading method throws the expected error
    await expect(repo.updategenreading(reqBody)).rejects.toThrowError('Database query failed: Query execution failed');
  });
});






&&&&&&&&&&&&&&&&&


import { Test, TestingModule } from '@nestjs/testing';
import { UpdateGenReadingController } from './updategenreading.controller';
import { UpdateGenreadingService } from './updategenreading.service';
import { Response } from 'express';
import { BadRequestException } from '@nestjs/common';

describe('UpdateGenReadingController', () => {
  let controller: UpdateGenReadingController;
  let service: UpdateGenreadingService;
  let mockResponse: Partial<Response>;

  beforeEach(async () => {
    mockResponse = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };

    const module: TestingModule = await Test.createTestingModule({
      controllers: [UpdateGenReadingController],
      providers: [
        {
          provide: UpdateGenreadingService,
          useValue: {
            updateDetails: jest.fn(),
          },
        },
      ],
    }).compile();

    controller = module.get<UpdateGenReadingController>(UpdateGenReadingController);
    service = module.get<UpdateGenreadingService>(UpdateGenreadingService);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  it('should call updateDetails and return 200 on success', async () => {
    const result = {
      pm_unid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: [],
    };
    const reqBody = {
      pm_unid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: [],
    };

    jest.spyOn(service, 'updateDetails').mockResolvedValue(result);

    await controller.putGenReading({ body: reqBody }, mockResponse as Response);

    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith({
      message: 'Readings added/updated successfully',
      data: result,
    });
  });

  it('should return 500 if service throws an error', async () => {
    const reqBody = { pm_unid: '4F97CD39DE06DCAB696F151C3F92E508', userid: 'collja', readings: [] };

    jest.spyOn(service, 'updateDetails').mockRejectedValue(new Error('Service error'));

    await controller.putGenReading({ body: reqBody }, mockResponse as Response);

    expect(mockResponse.status).toHaveBeenCalledWith(500);
    expect(mockResponse.json).toHaveBeenCalledWith({
      message: 'Error updating readings',
      error: 'Service error',
      statusCode: 500,
    });
  });
});

=============
import { Test, TestingModule } from '@nestjs/testing';
import { UpdateGenreadingService } from './updategenreading.service';
import { UpdateGenReadingRepo } from './updategenreading.repo';

describe('UpdateGenreadingService', () => {
  let service: UpdateGenreadingService;
  let repo: UpdateGenReadingRepo;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UpdateGenreadingService,
        {
          provide: UpdateGenReadingRepo,
          useValue: {
            updategenreading: jest.fn(),
          },
        },
      ],
    }).compile();

    service = module.get<UpdateGenreadingService>(UpdateGenreadingService);
    repo = module.get<UpdateGenReadingRepo>(UpdateGenReadingRepo);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  it('should return updated readings with metadata on success', async () => {
    const reqBody = {
      pm_unid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: [
        {
          ac_voltage: '24.10',
          ac_current: '72.00',
          oil_level: '0.25',
          fuel_level1: '0.87',
          fuel_level2: '0.00',
          fuel_level3: '0.00',
          fuel_level4: '0.00',
          totalruntime: '123',
        },
      ],
    };

    const mockResult = [
      {
        ac_voltage: '24.10',
        ac_current: '72.00',
        oil_level: '0.25',
        fuel_level1: '0.87',
        fuel_level2: '0.00',
        fuel_level3: '0.00',
        fuel_level4: '0.00',
        totalruntime: '123',
        meta_createdby: 'rhymeri',
        meta_createddate: '2023-02-03 11:54:03',
        meta_lastupdateby: 'collja',
        meta_lastupdatedate: '2024-11-10 23:42:47',
      },
    ];

    jest.spyOn(repo, 'updategenreading').mockResolvedValue(mockResult);

    const result = await service.updateDetails(reqBody);

    expect(result).toEqual({
      pmunid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: mockResult,
    });
  });

  it('should throw an error if the repository fails', async () => {
    const reqBody = { pm_unid: '4F97CD39DE06DCAB696F151C3F92E508', userid: 'collja', readings: [] };

    jest.spyOn(repo, 'updategenreading').mockRejectedValue(new Error('Database error'));

    await expect(service.updateDetails(reqBody)).rejects.toThrowError('Failed to update readings: Database error');
  });
});
=======
import { Test, TestingModule } from '@nestjs/testing';
import { UpdateGenReadingRepo } from './updategenreading.repo';
import { Oracle } from '../common/database/oracle';
import { queries } from './updategenreading.qFactory';

describe('UpdateGenReadingRepo', () => {
  let repo: UpdateGenReadingRepo;
  let oraUtil: Oracle;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UpdateGenReadingRepo,
        {
          provide: Oracle,
          useValue: {
            executeQuery: jest.fn(),
          },
        },
      ],
    }).compile();

    repo = module.get<UpdateGenReadingRepo>(UpdateGenReadingRepo);
    oraUtil = module.get<Oracle>(Oracle);
  });

  it('should be defined', () => {
    expect(repo).toBeDefined();
  });

  it('should call executeQuery to update readings and fetch metadata', async () => {
    const reqBody = {
      pm_unid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: [
        {
          ac_voltage: '24.10',
          ac_current: '72.00',
          oil_level: '0.25',
          fuel_level1: '0.87',
          fuel_level2: '0.00',
          fuel_level3: '0.00',
          fuel_level4: '0.00',
          totalruntime: '123',
        },
      ],
    };

    const mockFetchData = {
      rows: [
        {
          META_CREATED_BY: 'rhymeri',
          META_CREATED_DATE: '2023-02-03 11:54:03',
          META_LAST_UPDATED_BY: 'collja',
          META_LAST_UPDATED_DATE: '2024-11-10 23:42:47',
        },
      ],
    };

    jest.spyOn(oraUtil, 'executeQuery').mockResolvedValueOnce(mockFetchData);

    const result = await repo.updategenreading(reqBody);

    expect(oraUtil.executeQuery).toHaveBeenCalledTimes(2);
    expect(result).toEqual([
      {
        ac_voltage: '24.10',
        ac_current: '72.00',
        oil_level: '0.25',
        fuel_level1: '0.87',
        fuel_level2: '0.00',
        fuel_level3: '0.00',
        fuel_level4: '0.00',
        totalruntime: '123',
        meta_createdby: 'rhymeri',
        meta_createddate: '2023-02-03 11:54:03',
        meta_lastupdateby: 'collja',
        meta_lastupdatedate: '2024-11-10 23:42:47',
      },
    ]);
  });

  it('should throw an error if query execution fails', async () => {
    const reqBody = { pm_unid: '4F97CD39DE06DCAB696F151C3F92E508', userid: 'collja', readings: [] };

    jest.spyOn(oraUtil, 'executeQuery').mockRejectedValue(new Error('Query execution failed'));

    await expect(repo.updategenreading(reqBody)).rejects.toThrowError('Database query failed: Query execution failed');
  });
});
++++++++++
 FAIL  updateGenReading/updategenreading.repo.spec.ts (6.524 s)
  ● UpdateGenReadingRepo › should call executeQuery to update readings and fetch metadata

    expect(received).toEqual(expected) // deep equality

    - Expected  - 16
    + Received  +  1

    - Array [
    -   Object {
    -     "ac_current": "72.00",
    -     "ac_voltage": "24.10",
    -     "fuel_level1": "0.87",
    -     "fuel_level2": "0.00",
    -     "fuel_level3": "0.00",
    -     "fuel_level4": "0.00",
    -     "meta_createdby": "rhymeri",
    -     "meta_createddate": "2023-02-03 11:54:03",
    -     "meta_lastupdateby": "collja",
    -     "meta_lastupdatedate": "2024-11-10 23:42:47",
    -     "oil_level": "0.25",
    -     "totalruntime": "123",
    -   },
    - ]
    + Array []

      63 |
      64 |     expect(oraUtil.executeQuery).toHaveBeenCalledTimes(2);
    > 65 |     expect(result).toEqual([
         |                    ^
      66 |       {
      67 |         ac_voltage: '24.10',
      68 |         ac_current: '72.00',

      at Object.<anonymous> (updateGenReading/updategenreading.repo.spec.ts:65:20)

  ● UpdateGenReadingRepo › should throw an error if query execution fails

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: []

      86 |     jest.spyOn(oraUtil, 'executeQuery').mockRejectedValue(new Error('Query execution failed'));
      87 |
    > 88 |     await expect(repo.updategenreading(reqBody)).rejects.toThrowError('Database query failed: Query execution failed');
         |           ^
      89 |   });
      90 | });

      at expect (../node_modules/expect/build/index.js:113:15)
      at Object.<anonymous> (updateGenReading/updategenreading.repo.spec.ts:88:11)
)))))))))))))))))))))))))))))))))
repo   
import { Test, TestingModule } from '@nestjs/testing';
import { UpdateGenReadingRepo } from './updategenreading.repo';
import { Oracle } from '../common/database/oracle';
import { queries } from './updategenreading.qFactory';

describe('UpdateGenReadingRepo', () => {
  let repo: UpdateGenReadingRepo;
  let oraUtil: Oracle;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UpdateGenReadingRepo,
        {
          provide: Oracle,
          useValue: {
            executeQuery: jest.fn(),
          },
        },
      ],
    }).compile();

    repo = module.get<UpdateGenReadingRepo>(UpdateGenReadingRepo);
    oraUtil = module.get<Oracle>(Oracle);
  });

  it('should be defined', () => {
    expect(repo).toBeDefined();
  });

  it('should call executeQuery to update readings and fetch metadata', async () => {
    const reqBody = {
      pm_unid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: [
        {
          ac_voltage: '24.10',
          ac_current: '72.00',
          oil_level: '0.25',
          fuel_level1: '0.87',
          fuel_level2: '0.00',
          fuel_level3: '0.00',
          fuel_level4: '0.00',
          totalruntime: '123',
        },
      ],
    };

    const mockFetchData = {
      rows: [
        {
          META_CREATED_BY: 'rhymeri',
          META_CREATED_DATE: '2023-02-03 11:54:03',
          META_LAST_UPDATED_BY: 'collja',
          META_LAST_UPDATED_DATE: '2024-11-10 23:42:47',
        },
      ],
    };

    jest.spyOn(oraUtil, 'executeQuery')
      .mockResolvedValueOnce([]) // Mock the update query
      .mockResolvedValueOnce(mockFetchData); // Mock the fetch query

    const result = await repo.updategenreading(reqBody);

    expect(oraUtil.executeQuery).toHaveBeenCalledTimes(2);
    expect(result).toEqual([
      {
        ac_voltage: '24.10',
        ac_current: '72.00',
        oil_level: '0.25',
        fuel_level1: '0.87',
        fuel_level2: '0.00',
        fuel_level3: '0.00',
        fuel_level4: '0.00',
        totalruntime: '123',
        meta_createdby: 'rhymeri',
        meta_createddate: '2023-02-03 11:54:03',
        meta_lastupdateby: 'collja',
        meta_lastupdatedate: '2024-11-10 23:42:47',
      },
    ]);
  });

  it('should throw an error if query execution fails', async () => {
    const reqBody = { pm_unid: '4F97CD39DE06DCAB696F151C3F92E508', userid: 'collja', readings: [] };

    jest.spyOn(oraUtil, 'executeQuery').mockRejectedValue(new Error('Query execution failed'));

    await expect(repo.updategenreading(reqBody)).rejects.toThrowError('Database query failed: Query execution failed');
  });
});
+++++++++++++++++++
import { Test, TestingModule } from '@nestjs/testing';
import { UpdateGenreadingService } from './updategenreading.service';
import { UpdateGenReadingRepo } from './updategenreading.repo';
import { of, throwError } from 'rxjs';

describe('UpdateGenreadingService', () => {
  let service: UpdateGenreadingService;
  let repo: UpdateGenReadingRepo;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UpdateGenreadingService,
        {
          provide: UpdateGenReadingRepo,
          useValue: {
            updategenreading: jest.fn(),
          },
        },
      ],
    }).compile();

    service = module.get<UpdateGenreadingService>(UpdateGenreadingService);
    repo = module.get<UpdateGenReadingRepo>(UpdateGenReadingRepo);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  it('should update readings and return result', async () => {
    const reqBody = {
      pm_unid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: [
        {
          ac_voltage: '24.10',
          ac_current: '72.00',
          oil_level: '0.25',
          fuel_level1: '0.87',
          fuel_level2: '0.00',
          fuel_level3: '0.00',
          fuel_level4: '0.00',
          totalruntime: '123',
        },
      ],
    };

    const repoResult = [
      {
        ac_voltage: '24.10',
        ac_current: '72.00',
        oil_level: '0.25',
        fuel_level1: '0.87',
        fuel_level2: '0.00',
        fuel_level3: '0.00',
        fuel_level4: '0.00',
        totalruntime: '123',
        meta_createdby: 'rhymeri',
        meta_createddate: '2023-02-03 11:54:03',
        meta_lastupdateby: 'collja',
        meta_lastupdatedate: '2024-11-10 23:42:47',
      },
    ];

    jest.spyOn(repo, 'updategenreading').mockResolvedValue(repoResult);

    const result = await service.updateDetails(reqBody);

    expect(repo.updategenreading).toHaveBeenCalledWith(reqBody);
    expect(result).toEqual({
      pmunid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: repoResult,
    });
  });

  it('should handle errors in updating readings', async () => {
    const reqBody = { pm_unid: '4F97CD39DE06DCAB696F151C3F92E508', userid: 'collja', readings: [] };

    jest.spyOn(repo, 'updategenreading').mockRejectedValue(new Error('Database query failed'));

    await expect(service.updateDetails(reqBody)).rejects.toThrowError('Failed to update readings: Database query failed');
  });
});
+++++++++++++++++
import { Test, TestingModule } from '@nestjs/testing';
import { UpdateGenReadingController } from './updategenreading.controller';
import { UpdateGenreadingService } from './updategenreading.service';
import { Response } from 'express';
import { of, throwError } from 'rxjs';

describe('UpdateGenReadingController', () => {
  let controller: UpdateGenReadingController;
  let service: UpdateGenreadingService;
  let res: Response;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [UpdateGenReadingController],
      providers: [
        {
          provide: UpdateGenreadingService,
          useValue: {
            updateDetails: jest.fn(),
          },
        },
      ],
    }).compile();

    controller = module.get<UpdateGenReadingController>(UpdateGenReadingController);
    service = module.get<UpdateGenreadingService>(UpdateGenreadingService);
    res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    } as unknown as Response;
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  it('should update readings successfully', async () => {
    const reqBody = {
      pm_unid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: [
        {
          ac_voltage: '24.10',
          ac_current: '72.00',
          oil_level: '0.25',
          fuel_level1: '0.87',
          fuel_level2: '0.00',
          fuel_level3: '0.00',
          fuel_level4: '0.00',
          totalruntime: '123',
        },
      ],
    };

    const serviceResult = {
      pmunid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: [
        {
          ac_voltage: '24.10',
          ac_current: '72.00',
          oil_level: '0.25',
          fuel_level1: '0.87',
          fuel_level2: '0.00',
          fuel_level3: '0.00',
          fuel_level4: '0.00',
          totalruntime: '123',
          meta_createdby: 'rhymeri',
          meta_createddate: '2023-02-03 11:54:03',
          meta_lastupdateby: 'collja',
          meta_lastupdatedate: '2024-11-10 23:42:47',
        },
      ],
    };

    jest.spyOn(service, 'updateDetails').mockResolvedValue(serviceResult);

    await controller.putGenReading({ body: reqBody } as any, res);

    expect(service.updateDetails).toHaveBeenCalledWith(reqBody);
    expect(res.status).toHaveBeenCalledWith(200);
    expect(res.json).toHaveBeenCalledWith({
      message: 'Readings added/updated successfully',
      data: serviceResult,
    });
  });

  it('should handle error while updating readings', async () => {
    const reqBody = {
      pm_unid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: [],
    };

    jest.spyOn(service, 'updateDetails').mockRejectedValue(new Error('Service Error'));

    await controller.putGenReading({ body: reqBody } as any, res);

    expect(res.status).toHaveBeenCalledWith(500);
    expect(res.json).toHaveBeenCalledWith({
      message: 'Error updating readings',
      error: 'Service Error',
      statusCode: 500,
    });
  });
});
###############################
 FAIL  updateGenReading/updategenreading.repo.spec.ts (6.707 s)
  ● UpdateGenReadingRepo › should throw an error if query execution fails

    expect(received).rejects.toThrowError()

    Received promise resolved instead of rejected
    Resolved to value: []

      88 |     jest.spyOn(oraUtil, 'executeQuery').mockRejectedValue(new Error('Query execution failed'));
      89 |
    > 90 |     await expect(repo.updategenreading(reqBody)).rejects.toThrowError('Database query failed: Query execution failed');   
         |           ^
      91 |   });
      92 | });

      at expect (../node_modules/expect/build/index.js:113:15)
      at Object.<anonymous> (updateGenReading/updategenreading.repo.spec.ts:90:11)
*******************************
import { Test, TestingModule } from '@nestjs/testing';
import { UpdateGenReadingRepo } from './updategenreading.repo';
import { Oracle } from '../common/database/oracle';
import { queries } from './updategenreading.qFactory';

describe('UpdateGenReadingRepo', () => {
  let repo: UpdateGenReadingRepo;
  let oraUtil: Oracle;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UpdateGenReadingRepo,
        {
          provide: Oracle,
          useValue: {
            executeQuery: jest.fn(),
          },
        },
      ],
    }).compile();

    repo = module.get<UpdateGenReadingRepo>(UpdateGenReadingRepo);
    oraUtil = module.get<Oracle>(Oracle);
  });

  it('should be defined', () => {
    expect(repo).toBeDefined();
  });

  it('should call executeQuery to update readings and fetch metadata', async () => {
    const reqBody = {
      pm_unid: '4F97CD39DE06DCAB696F151C3F92E508', // Correct field name used here
      userid: 'collja',
      readings: [
        {
          ac_voltage: '24.10',
          ac_current: '72.00',
          oil_level: '0.25',
          fuel_level1: '0.87',
          fuel_level2: '0.00',
          fuel_level3: '0.00',
          fuel_level4: '0.00',
          totalruntime: '123',
        },
      ],
    };

    const mockFetchData = {
      rows: [
        {
          META_CREATED_BY: 'rhymeri',
          META_CREATED_DATE: '2023-02-03 11:54:03',
          META_LAST_UPDATED_BY: 'collja',
          META_LAST_UPDATED_DATE: '2024-11-10 23:42:47',
        },
      ],
    };

    jest.spyOn(oraUtil, 'executeQuery')
      .mockResolvedValueOnce([]) // Mock the update query
      .mockResolvedValueOnce(mockFetchData); // Mock the fetch query

    const result = await repo.updategenreading(reqBody);

    expect(oraUtil.executeQuery).toHaveBeenCalledTimes(2);
    expect(result).toEqual([
      {
        ac_voltage: '24.10',
        ac_current: '72.00',
        oil_level: '0.25',
        fuel_level1: '0.87',
        fuel_level2: '0.00',
        fuel_level3: '0.00',
        fuel_level4: '0.00',
        totalruntime: '123',
        meta_createdby: 'rhymeri',
        meta_createddate: '2023-02-03 11:54:03',
        meta_lastupdateby: 'collja',
        meta_lastupdatedate: '2024-11-10 23:42:47',
      },
    ]);
  });

  it('should throw an error if query execution fails', async () => {
    const reqBody = { pm_unid: '4F97CD39DE06DCAB696F151C3F92E508', userid: 'collja', readings: [] };

    // Mock rejection for the executeQuery method to simulate a failure
    jest.spyOn(oraUtil, 'executeQuery').mockRejectedValueOnce(new Error('Query execution failed'));

    // Ensure that updategenreading method rejects with the expected error
    await expect(repo.updategenreading(reqBody)).rejects.toThrowError('Database query failed: Query execution failed');
  });
});
