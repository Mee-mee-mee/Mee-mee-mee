import { Controller, Param, Get, Query, Req, Res } from '@nestjs/common';
import { PmTechSummService } from './pmTechSumm.service';
import { ApiTags } from '@nestjs/swagger';
import logger from '../common/logger/logger';
import { Request, Response } from 'express';

@Controller('ioppm')
@ApiTags('Default')
export class PmTechSummController {
    constructor(private readonly pmTechSummService: PmTechSummService) {}

    // Get PM Summary for Manager details
    @Get('/tech/:techId/pm/summary')
    async getTasksByPm(
        @Param('techId') techId: string,
        @Query('duein') duein: string,
        @Req() req: Request,
        @Res() res: Response,
    ) {
        try {
            const pmData = await this.pmTechSummService.PmData(techId, duein);
            if (pmData.taskcounts.length === 0) {
                return res.status(204).send(); // No Content
            }
            return res.json(pmData);
        } catch (err) {
            logger.error(`Error fetching PM Summary for techId: ${techId}`, err);
            return res.status(500).json({ message: 'Internal server error', error: err.message });
        }
    }
}
==============
import { Injectable } from '@nestjs/common';
import PmTechRepo from './pmTechSumm.repo';

@Injectable()
export class PmTechSummService {
    constructor(private readonly pmTechRepo: PmTechRepo) {}

    async PmData(techId: string, duein: string) {
        try {
            const data = await this.pmTechRepo.getPmTechSumm(techId, duein);

            // Transform the data to the desired response format
            const taskCounts = data.map(item => ({
                site_unid: item.site_unid,
                siteid: item.siteid,
                site_name: item.site_name,
                switch: item.switch,
                tasks: [
                    {
                        duein: duein,
                        pm: {
                            total: item.total,
                            done: item.done,
                            perc: item.perc,
                        },
                    },
                ],
            }));

            return { taskcounts: taskCounts };
        } catch (error) {
            throw new Error(`Failed to fetch PM Data for techId: ${techId} due to ${error.message}`);
        }
    }
}

======
import { Injectable } from '@nestjs/common';
import { Oracle } from '../common/database/oracle';
import { queries } from './pmTechSumm.qfactory';

@Injectable()
export default class PmTechRepo {
    constructor(private readonly oraUtil: Oracle) {}

    async getPmTechSumm(techId: string, duein: string) {
        try {
            if (!techId || !duein) {
                throw new Error('Invalid input parameters: techId and duein are required.');
            }

            const query = queries.getPmTechSumm;
            const qParams = [techId, duein];

            const data: any = await this.oraUtil.executeQuery(query, qParams);
            return data.rows || [];
        } catch (error) {
            throw new Error(`Failed to execute getPmTechSumm: ${error.message}`);
        }
    }
}

==========
export const queries = {
    getPmTechSumm: `
        SELECT 
            site_unid,
            siteid,
            site_name,
            switch,
            COUNT(*) AS total,
            SUM(CASE WHEN status = 'done' THEN 1 ELSE 0 END) AS done,
            CASE 
                WHEN COUNT(*) > 0 THEN (SUM(CASE WHEN status = 'done' THEN 1 ELSE 0 END) / COUNT(*)) * 100 
                ELSE 0 
            END AS perc
        FROM 
            pmd_widget_pm_details
        WHERE 
            tech_id = :techId
            AND due_in = :duein
        GROUP BY 
            site_unid, siteid, site_name, switch
    `
};
