import { Controller, Put, Body, Res } from '@nestjs/common';
import { UpdateGenreadingService } from './updategenreading.service';
import { ApiTags } from '@nestjs/swagger';
import { Response } from 'express';

@ApiTags('Generator Readings')
@Controller('ioppm')
export class UpdateGenReadingController {
  constructor(private readonly updateGenreadingService: UpdateGenreadingService) {}

  @Put('/update/pm/genreading')
  async putGenReading(@Body() reqBody: any, @Res() res: Response) {
    try {
      // Process the request body using the service
      const result = await this.updateGenreadingService.updateDetails(reqBody);

      // Return the result in the desired structure without affectedRows
      return res.status(200).json(result);
    } catch (err) {
      // Handle error and return a structured error response
      return res.status(500).json({
        message: 'Error updating readings',
        error: err.message || err,
        statusCode: 500,
      });
    }
  }
}
=============
import { Injectable } from '@nestjs/common';
import { UpdateGenReadingRepo } from './updategenreading.repo';

@Injectable()
export class UpdateGenreadingService {
  constructor(private updateGenReadingRepo: UpdateGenReadingRepo) {}

  // Main function to update readings
  async updateDetails(reqBody: any) {
    try {
      // Perform the database update operation
      await this.updateGenReadingRepo.updategenreading(reqBody);

      // Return the structured response without affectedRows
      return {
        message: 'Readings added/updated successfully',
        data: reqBody, // Sending back the data that was processed
      };
    } catch (error) {
      throw new Error('Failed to update readings: ' + error.message);
    }
  }
}
============
import { Injectable } from '@nestjs/common';
import { Oracle } from '../common/database/oracle';
import { queries } from './updategenreading.qFactory';

@Injectable()
export class UpdateGenReadingRepo {
  constructor(private oraUtil: Oracle) {}

  async updategenreading(reqBody: any): Promise<void> {
    try {
      const { pm_unid, userid: loginid, readings } = reqBody;

      // Loop through all readings and update them one by one
      for (let reading of readings) {
        const {
          totalruntime, ac_voltage, ac_current,
          fuel_level1, fuel_level2, fuel_level3, fuel_level4,
          oil_level, fuel_gallonsadded1,
        } = reading;

        const qParams = [
          pm_unid, loginid, totalruntime, ac_voltage, ac_current,
          fuel_level1, fuel_level2, fuel_level3, fuel_level4,
          oil_level, fuel_gallonsadded1
        ];

        // Execute the update query
        await this.oraUtil.executeQuery(queries.updategenreading, qParams);
      }
    } catch (error) {
      throw new Error('Database query failed: ' + error.message);
    }
  }
}
============
export const queries = {
  updategenreading: `
    UPDATE OPSPM.PM_GENERATOR
    SET 
      TOTAL_RUNTIME = :totalruntime,
      AC_VOLTAGE = :ac_voltage,
      AC_CURRENT = :ac_current,
      FUEL_LEVEL_1 = :fuel_level1,
      FUEL_LEVEL_2 = :fuel_level2,
      FUEL_LEVEL_3 = :fuel_level3,
      FUEL_LEVEL_4 = :fuel_level4,
      OIL_LEVEL = :oil_level,
      FUEL_GALLONS_ADDED_1 = :fuel_gallonsadded1,
      META_LAST_UPDATED_BY = :loginid,
      META_LAST_UPDATED_DATE = sys_extract_utc(systimestamp)
    WHERE SOURCE_TAG = :pm_unid`
};
==
