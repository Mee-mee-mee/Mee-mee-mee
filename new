 FAIL  src/updateTask/UpdateTask.repo.spec.ts (6.979 s)
  ● Console

    console.log
      [ { status: 'completed', task_unid: '1' } ]

      at UpdateTaskRepo.updatetask (updateTask/UpdateTask.repo.ts:14:13)

    console.log
      []

      at UpdateTaskRepo.updatetask (updateTask/UpdateTask.repo.ts:14:13)

  ● UpdateTaskRepo › updatetask › should throw an error if the database call fails
                                                                                                                                     
    expect(received).rejects.toThrow()                                                                                               
                                                                                                                                     
    Received promise resolved instead of rejected                                                                                    
    Resolved to value: undefined                                                                                                     
                                                                                                                                     
      52 |       oraUtil.executeQuery = jest.fn().mockRejectedValue(new Error('DB Error'));                                          
      53 |
    > 54 |       await expect(repo.updatetask(req)).rejects.toThrow('DB Error');
         |             ^
      55 |     });
      56 |   });
      57 | });

      at expect (../node_modules/expect/build/index.js:113:15)
      at Object.<anonymous> (updateTask/UpdateTask.repo.spec.ts:54:13)

 PASS  src/updateTask/UpdateTask.controller.spec.ts (7.258 s)
  ● Console
                     
=========================
// updateTask.repo.spec.ts
import { Test, TestingModule } from '@nestjs/testing';
import UpdateTaskRepo from './UpdateTask.repo';
import Oracle from '../common/database/oracle';

describe('UpdateTaskRepo', () => {
  let repo: UpdateTaskRepo;
  let oraUtil: Oracle;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UpdateTaskRepo,
        {
          provide: Oracle,
          useValue: {
            executeQuery: jest.fn(),
          },
        },
      ],
    }).compile();

    repo = module.get<UpdateTaskRepo>(UpdateTaskRepo);
    oraUtil = module.get<Oracle>(Oracle);
  });

  it('should be defined', () => {
    expect(repo).toBeDefined();
  });

  describe('updatetask', () => {
    it('should update tasks and return affected rows', async () => {
      const req = {
        body: {
          pm: {
            pmtasks: [{ status: 'completed', task_unid: '1' }],
            userid: 'user123',
          },
        },
      };

      oraUtil.executeQuery = jest.fn().mockResolvedValue({ rowsaffected: 1 });

      const result = await repo.updatetask(req);
      expect(result).toBe(1);
      expect(oraUtil.executeQuery).toHaveBeenCalledTimes(1);
    });

    it('should throw an error if the database call fails', async () => {
      const req = {
        body: {
          pm: {
            pmtasks: [{ status: 'failed', task_unid: '2' }],
            userid: 'user123',
          },
        },
      };

      oraUtil.executeQuery = jest.fn().mockRejectedValue(new Error('DB Error'));

      await expect(repo.updatetask(req)).rejects.toThrow('DB Error');
      expect(oraUtil.executeQuery).toHaveBeenCalledTimes(1); // Ensure it's called
    });
  });
});
