import { Controller, Param, Get, Req, Res } from '@nestjs/common';
import { switchTaskService } from './switchTask.service';
import { ApiTags } from '@nestjs/swagger';
import logger from '../common/logger/logger';
import { Request, Response } from 'express';

const config = require('config');

@Controller('ioppm')
@ApiTags('Default')
export class switchTaskController {
  constructor(private readonly SwitchTaskService: switchTaskService) {}

  // This will return the tasks associated with a PM for a switch
  @Get('/switch/:switchUnid/pm')
  async getTasksByPm(
    @Param('switchUnid') switchUnid: string,
    @Req() req: Request,
    @Res() res: Response,
  ) {
    logger.info('Processing request to fetch tasks for PM switch.');
    logger.debug('Request parameters:', { switchUnid });
    logger.debug('Request headers:', { headers: req.headers });

    try {
      logger.info('Fetching PM tasks for switch.', { switchUnid });
      const data: any = await this.SwitchTaskService.PmData(switchUnid);
      logger.debug('Retrieved data from service:', { data });

      if (data.length === 0) {
        logger.info('No records found for the switch.', { switchUnid });
        return res.status(200).send('No records found');
      } else {
        logger.info('Successfully retrieved tasks for PM switch.', { switchUnid, recordsCount: data.length });
        return res.send(data);
      }
    } catch (err) {
      logger.error('Error while fetching tasks for PM switch.', { errorMessage: err.message, stack: err.stack });
      logger.debug('Error details:', { error: err });
      return res.status(500).json({ message: 'Internal server error', error: err.message });
    }
  }
}
+++++++

import { Injectable } from '@nestjs/common';
import SwitchTaskRepo from './switchTask.repo';

@Injectable()
export class switchTaskService {
    constructor(private SwitchTaskRepo: SwitchTaskRepo) { }
    async PmData(switchUnid) {
        try {
            const data = await this.SwitchTaskRepo.getPmBySwitch(switchUnid);
            const transformedData = data.map(item => {
                const lowerCaseItem = {};
                for (const key in item) {
                    if (item.hasOwnProperty(key)) {
                        lowerCaseItem[key.toLowerCase()] = item[key];
                    }
                }
                return lowerCaseItem;
            });
            return { pmlist: transformedData };
        } catch (error) {
            throw error;
        }
    }
}
++++++
import { Injectable } from '@nestjs/common';
import { Oracle } from '../common/database/oracle';
import { queries } from './switchTask.qFactory';
import { reformatDates } from 'src/common/utils/common_util';

@Injectable()
export default class SwitchTaskRepo {
  constructor(private oraUtil: Oracle) { }

  async getPmBySwitch(switchUnid) {
    try {
      const query = queries.getPmBySwitch;
      const qParams = [switchUnid];
      let data: any = await this.oraUtil.executeQuery(query, qParams);
      data = data.rows;

      for (let task of data) {
        //changeing the date format as in DB 
        task['STARTDATE'] = reformatDates(task['STARTDATE']);
        task['STOPDATE'] = reformatDates(task['STOPDATE']);
      }

      return data;
    } catch (error) {
      throw error;
    }
  }
}
++++
export const queries = {
    getPmBySwitch: `
    SELECT listname,frequency,switch,switch_unid,site_unid,numtasks,numtasksdone,startdate,stopdate,pm_unid,pmd_widget_id FROM (
    SELECT
        PMD_WIDGET_PM_DETAILS.LIST_NAME AS listname,
        PMD_WIDGET_PM_DETAILS.FREQUENCY AS frequency,
        PMD_WIDGET_PM_DETAILS.SWITCH_NAME AS switch,
        PMD_WIDGET_PM_DETAILS.SWITCH_UNID AS switch_unid,
        PMD_WIDGET_PM_DETAILS.SITE_UNID AS site_unid,
        PMD_WIDGET_PM_DETAILS.NUM_OF_TASKS AS numtasks,
        ( select count(*) FROM opspm.pm_location_task plt 
          WHERE 
          plt.SWITCH_UNID = PMD_WIDGET_PM_DETAILS.SWITCH_UNID AND
          plt.PM_HEADER_ID = PMD_WIDGET_PM_DETAILS.PM_UNID
          AND plt.status_id != 'I'
          ) AS numtasksdone,
        to_char(plt.PM_TASK_START_TIME) AS startdate,
        to_char(plt.PM_TASK_STOP_TIME) AS stopdate,
        PMD_WIDGET_PM_DETAILS.PM_UNID AS pm_unid,
        PMD_WIDGET_PM_DETAILS.PMD_WIDGET_ID AS pmd_widget_id,
        ROW_NUMBER() OVER (PARTITION BY PMD_WIDGET_PM_DETAILS.PM_UNID ORDER BY PMD_WIDGET_PM_DETAILS.PM_UNID) AS row_num
    FROM
        PMD_WIDGET_PM_DETAILS
    LEFT JOIN
        pmd_widget
    ON
        PMD_WIDGET_PM_DETAILS.PMD_WIDGET_ID = pmd_widget.PMD_WIDGET_ID
        
    LEFT JOIN 
    opspm.pm_location_task plt 
    ON 
    plt.SWITCH_UNID = PMD_WIDGET_PM_DETAILS.SWITCH_UNID AND plt.PM_HEADER_ID = PMD_WIDGET_PM_DETAILS.PM_UNID
        
    WHERE
        PMD_WIDGET_PM_DETAILS.switch_unid = :switchUnid
        AND PMD_WIDGET_PM_DETAILS.LIST_NAME LIKE '%Switch%'
        AND PMD_WIDGET_PM_DETAILS.SITE_UNID IS null
        AND PMD_WIDGET_PM_DETAILS.END_DATE > sysdate)
    WHERE row_num = 1`,
};
""""""""""""""""""""
import { Test, TestingModule } from '@nestjs/testing';
import { switchTaskController } from './switchTask.controller';
import { switchTaskService } from './switchTask.service';
import { Oracle } from '../common/database/oracle';
import { Response } from 'express';
import { Logger } from '../common/logger/logger';

// Mocking dependencies
jest.mock('./switchTask.service');
jest.mock('../common/logger/logger');

describe('switchTaskController', () => {
  let controller: switchTaskController;
  let service: switchTaskService;
  let res: Response;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [switchTaskController],
      providers: [switchTaskService, Oracle],
    }).compile();

    controller = module.get<switchTaskController>(switchTaskController);
    service = module.get<switchTaskService>(switchTaskService);
    res = {
      status: jest.fn().mockReturnThis(),
      send: jest.fn().mockReturnThis(),
    } as unknown as Response;
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  it('should call PmData and return data when PM tasks exist', async () => {
    const mockData = {
      pmlist: [
        {
          listname: 'Task 1',
          frequency: 'Monthly',
          switch: 'Switch A',
          switch_unid: '123',
          site_unid: '456',
          numtasks: 5,
          numtasksdone: 3,
          startdate: '2021-01-01',
          stopdate: '2021-01-31',
          pm_unid: '789',
          pmd_widget_id: '101112',
        },
      ],
    };

    jest.spyOn(service, 'PmData').mockResolvedValue(mockData);

    await controller.getTasksByPm('123', { headers: {} } as any, res);

    expect(service.PmData).toHaveBeenCalledWith('123');
    expect(res.send).toHaveBeenCalledWith(mockData);
  });

  it('should return 200 with message when no records are found', async () => {
    jest.spyOn(service, 'PmData').mockResolvedValue({ pmlist: [] });

    await controller.getTasksByPm('123', { headers: {} } as any, res);

    expect(res.status).toHaveBeenCalledWith(200);
    expect(res.send).toHaveBeenCalledWith('No records found');
  });

  it('should return 500 if service throws an error', async () => {
    const error = new Error('Service Error');
    jest.spyOn(service, 'PmData').mockRejectedValue(error);

    await controller.getTasksByPm('123', { headers: {} } as any, res);

    expect(res.status).toHaveBeenCalledWith(500);
    expect(res.send).toHaveBeenCalledWith({ message: 'Internal server error', error: error.message });
  });

  it('should log the request headers', async () => {
    const mockData = {
      pmlist: [
        {
          listname: 'Task 1',
          frequency: 'Monthly',
          switch: 'Switch A',
          switch_unid: '123',
          site_unid: '456',
          numtasks: 5,
          numtasksdone: 3,
          startdate: '2021-01-01',
          stopdate: '2021-01-31',
          pm_unid: '789',
          pmd_widget_id: '101112',
        },
      ],
    };

    // Mock logger
    const logInfoSpy = jest.spyOn(Logger.prototype, 'info').mockImplementation();
    const logDebugSpy = jest.spyOn(Logger.prototype, 'debug').mockImplementation();

    jest.spyOn(service, 'PmData').mockResolvedValue(mockData);

    await controller.getTasksByPm('123', { headers: { 'x-test-header': 'test' } } as any, res);

    expect(logInfoSpy).toHaveBeenCalledWith('Processing request to fetch tasks for PM switch.');
    expect(logDebugSpy).toHaveBeenCalledWith('Request parameters:', { switchUnid: '123' });
    expect(logDebugSpy).toHaveBeenCalledWith('Request headers:', { headers: { 'x-test-header': 'test' } });
  });
});
++++++++++++++
import { Test, TestingModule } from '@nestjs/testing';
import { switchTaskService } from './switchTask.service';
import SwitchTaskRepo from './switchTask.repo';

jest.mock('./switchTask.repo');

describe('switchTaskService', () => {
  let service: switchTaskService;
  let repo: SwitchTaskRepo;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [switchTaskService, SwitchTaskRepo],
    }).compile();

    service = module.get<switchTaskService>(switchTaskService);
    repo = module.get<SwitchTaskRepo>(SwitchTaskRepo);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  it('should transform the data correctly', async () => {
    const mockData = [
      {
        LISTNAME: 'Task 1',
        FREQUENCY: 'Monthly',
        SWITCH: 'Switch A',
        SWITCH_UNID: '123',
        SITE_UNID: '456',
        NUMTASKS: 5,
        NUMTASKSDONE: 3,
        STARTDATE: '2021-01-01',
        STOPDATE: '2021-01-31',
        PM_UNID: '789',
        PMD_WIDGET_ID: '101112',
      },
    ];

    jest.spyOn(repo, 'getPmBySwitch').mockResolvedValue(mockData);

    const result = await service.PmData('123');

    expect(result.pmlist[0].listname).toBe('task 1');
    expect(result.pmlist[0].frequency).toBe('monthly');
  });

  it('should throw error if repo fails', async () => {
    const error = new Error('Repo Error');
    jest.spyOn(repo, 'getPmBySwitch').mockRejectedValue(error);

    await expect(service.PmData('123')).rejects.toThrow('Repo Error');
  });
});
+++++++++
import { Test, TestingModule } from '@nestjs/testing';
import SwitchTaskRepo from './switchTask.repo';
import { Oracle } from '../common/database/oracle';
import { reformatDates } from 'src/common/utils/common_util';

jest.mock('../common/database/oracle');
jest.mock('src/common/utils/common_util');

describe('SwitchTaskRepo', () => {
  let repo: SwitchTaskRepo;
  let oraUtil: Oracle;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [SwitchTaskRepo, Oracle],
    }).compile();

    repo = module.get<SwitchTaskRepo>(SwitchTaskRepo);
    oraUtil = module.get<Oracle>(Oracle);
  });

  it('should be defined', () => {
    expect(repo).toBeDefined();
  });

  it('should return transformed data', async () => {
    const mockData = {
      rows: [
        {
          LISTNAME: 'Task 1',
          FREQUENCY: 'Monthly',
          SWITCH: 'Switch A',
          SWITCH_UNID: '123',
          SITE_UNID: '456',
          NUMTASKS: 5,
          NUMTASKSDONE: 3,
          STARTDATE: '2021-01-01',
          STOPDATE: '2021-01-31',
          PM_UNID: '789',
          PMD_WIDGET_ID: '101112',
        },
      ],
    };

    jest.spyOn(oraUtil, 'executeQuery').mockResolvedValue(mockData);
    jest.spyOn(reformatDates, 'reformatDates').mockReturnValue('2021-01-01');

    const result = await repo.getPmBySwitch('123');
    expect(result[0].STARTDATE).toBe('2021-01-01');
  });

  it('should throw error if executeQuery fails', async () => {
    const error = new Error('Database Error');
    jest.spyOn(oraUtil, 'executeQuery').mockRejectedValue(error);

    await expect(repo.getPmBySwitch('123')).rejects.toThrow('Database Error');
  });
});

LLLLLLLLLLLL
import { Test, TestingModule } from '@nestjs/testing';
import { switchTaskController } from './switchTask.controller';
import { switchTaskService } from './switchTask.service';
import { Response } from 'express';

jest.mock('./switchTask.service');

describe('switchTaskController', () => {
  let controller: switchTaskController;
  let service: switchTaskService;
  let res: Response;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [switchTaskController],
      providers: [switchTaskService],
    }).compile();

    controller = module.get<switchTaskController>(switchTaskController);
    service = module.get<switchTaskService>(switchTaskService);
    res = {
      status: jest.fn().mockReturnThis(),
      send: jest.fn().mockReturnThis(),
    } as unknown as Response;
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  it('should call PmData and return data when PM tasks exist', async () => {
    const mockData = {
      pmlist: [
        {
          listname: 'Task 1',
          frequency: 'Monthly',
          switch: 'Switch A',
          switch_unid: '123',
          site_unid: '456',
          numtasks: 5,
          numtasksdone: 3,
          startdate: '2021-01-01',
          stopdate: '2021-01-31',
          pm_unid: '789',
          pmd_widget_id: '101112',
        },
      ],
    };

    jest.spyOn(service, 'PmData').mockResolvedValue(mockData);

    await controller.getTasksByPm('123', { headers: {} } as any, res);

    expect(service.PmData).toHaveBeenCalledWith('123');
    expect(res.send).toHaveBeenCalledWith(mockData);
  });

  it('should return 200 with message when no records are found', async () => {
    jest.spyOn(service, 'PmData').mockResolvedValue({ pmlist: [] });

    await controller.getTasksByPm('123', { headers: {} } as any, res);

    expect(res.status).toHaveBeenCalledWith(200);
    expect(res.send).toHaveBeenCalledWith('No records found');
  });

  it('should return 500 if service throws an error', async () => {
    const error = new Error('Service Error');
    jest.spyOn(service, 'PmData').mockRejectedValue(error);

    await controller.getTasksByPm('123', { headers: {} } as any, res);

    expect(res.status).toHaveBeenCalledWith(500);
    expect(res.send).toHaveBeenCalledWith({ message: 'Internal server error', error: error.message });
  });
});
==========
import { Test, TestingModule } from '@nestjs/testing';
import { switchTaskService } from './switchTask.service';
import SwitchTaskRepo from './switchTask.repo';

jest.mock('./switchTask.repo');

describe('switchTaskService', () => {
  let service: switchTaskService;
  let repo: SwitchTaskRepo;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [switchTaskService, SwitchTaskRepo],
    }).compile();

    service = module.get<switchTaskService>(switchTaskService);
    repo = module.get<SwitchTaskRepo>(SwitchTaskRepo);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  it('should transform the data correctly', async () => {
    const mockData = [
      {
        LISTNAME: 'Task 1',
        FREQUENCY: 'Monthly',
        SWITCH: 'Switch A',
        SWITCH_UNID: '123',
        SITE_UNID: '456',
        NUMTASKS: 5,
        NUMTASKSDONE: 3,
        STARTDATE: '2021-01-01',
        STOPDATE: '2021-01-31',
        PM_UNID: '789',
        PMD_WIDGET_ID: '101112',
      },
    ];

    jest.spyOn(repo, 'getPmBySwitch').mockResolvedValue(mockData);

    const result = await service.PmData('123');

    expect(result.pmlist[0].listname).toBe('task 1');
    expect(result.pmlist[0].frequency).toBe('monthly');
  });

  it('should throw error if repo fails', async () => {
    const error = new Error('Repo Error');
    jest.spyOn(repo, 'getPmBySwitch').mockRejectedValue(error);

    await expect(service.PmData('123')).rejects.toThrow('Repo Error');
  });
});
======
import { Test, TestingModule } from '@nestjs/testing';
import SwitchTaskRepo from './switchTask.repo';
import { Oracle } from '../common/database/oracle';
import { reformatDates } from 'src/common/utils/common_util';

jest.mock('../common/database/oracle');
jest.mock('src/common/utils/common_util');

describe('SwitchTaskRepo', () => {
  let repo: SwitchTaskRepo;
  let oraUtil: Oracle;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [SwitchTaskRepo, Oracle],
    }).compile();

    repo = module.get<SwitchTaskRepo>(SwitchTaskRepo);
    oraUtil = module.get<Oracle>(Oracle);
  });

  it('should be defined', () => {
    expect(repo).toBeDefined();
  });

  it('should return transformed data', async () => {
    const mockData = {
      rows: [
        {
          LISTNAME: 'Task 1',
          FREQUENCY: 'Monthly',
          SWITCH: 'Switch A',
          SWITCH_UNID: '123',
          SITE_UNID: '456',
          NUMTASKS: 5,
          NUMTASKSDONE: 3,
          STARTDATE: '2021-01-01',
          STOPDATE: '2021-01-31',
          PM_UNID: '789',
          PMD_WIDGET_ID: '101112',
        },
      ],
    };

    jest.spyOn(oraUtil, 'executeQuery').mockResolvedValue(mockData);
    jest.spyOn(reformatDates, 'reformatDates').mockReturnValue('2021-01-01');

    const result = await repo.getPmBySwitch('123');
    expect(result[0].STARTDATE).toBe('2021-01-01');
  });

  it('should throw error if executeQuery fails', async () => {
    const error = new Error('Database Error');
    jest.spyOn(oraUtil, 'executeQuery').mockRejectedValue(error);

    await expect(repo.getPmBySwitch('123')).rejects.toThrow('Database Error');
  });
});
