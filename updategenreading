import { Controller, Param, Put, Req, Res } from '@nestjs/common';
import { UpdateGenreadingService } from './updategenreading.service';
import { ApiTags } from '@nestjs/swagger';
import logger from '../common/logger/logger';
import { Request, Response } from 'express';

const config = require('config');

@Controller('ioppm')
@ApiTags('Default')
export class UpdateGenReadingController {
  constructor(private readonly UpdateGenreadingService: UpdateGenreadingService) {}

  // PM put Genreading
  @Put('/update/pm/genreading')
  async putGenReading(@Req() req: Request, @Res() res: Response) {
    logger.info('Processing request to update PM genreading.');
    logger.debug('Request body:', { body: req.body });
    logger.debug('Request headers:', { headers: req.headers });

    try {
      logger.info('Updating genreading details.');
      const data: any = await this.UpdateGenreadingService.updateDetails(req);
      logger.debug('Update response:', { data });

      logger.info('Successfully updated genreading details.');
      return res.send(data);
    } catch (err) {
      logger.error('Error in updating genreading.', { errorMessage: err.message, stack: err.stack });
      logger.debug('Error details:', { error: err });
      return res.status(500).json({ message: 'Internal server error', error: err.message });
    }
  }
}
=======
import { Injectable } from '@nestjs/common';
import UpdateGenReadingRepo from './updategenreading.repo';


@Injectable()
export class UpdateGenreadingService {

  constructor(private UpdateGenReadingRepo: UpdateGenReadingRepo) {}
  async updateDetails(req) {
      try {
        const data = await this.UpdateGenReadingRepo.updategenreading(req);
        const data_json= {"message": "Readings added/updated successfully","data": req.body}
        return data_json;
      } catch (error) {
        throw error;
      }
}
    }
++++++
import { Injectable } from '@nestjs/common';
import  {Oracle}  from '../common/database/oracle';
import { queries } from './updategenreading.qFactory';

@Injectable()
export default class UpdateGenReadingRepo {
  constructor(private oraUtil: Oracle) {}

  async updategenreading(req: any){
    try{
       
    const query = queries.updategenreading;
    // const SPECIFIC_DATA_VALUE=req.body.readings[0];
    const SPECIFIC_DATA_VALUE = JSON.stringify(req.body.readings[0])
    const META_CREATED_BY= req.body.userid; 
    const pm_unid=req.body.pm_unid;
    const qParams=[SPECIFIC_DATA_VALUE,META_CREATED_BY,pm_unid];
    let data: any=await this.oraUtil.executeQuery(query,qParams);
      data = data.rowsAffected;
      return data;
    } catch (error) {
      throw error;
    }
}
}
======
export const queries={
    updategenreading: `UPDATE opspm.pm_location_task 
    SET SPECIFIC_DATA_VALUE = :SPECIFIC_DATA_VALUE,
    META_LAST_UPDATED_DATE = sys_extract_utc(systimestamp),
    META_LAST_UPDATED_BY = :META_CREATED_BY
    WHERE PM_HEADER_ID = :pm_unid`
}
TTTTTTTTT
import { Test, TestingModule } from '@nestjs/testing';
import { UpdateGenReadingController } from './updategenreading.controller';
import { UpdateGenreadingService } from './updategenreading.service';
import { Response, Request } from 'express';
import logger from '../common/logger/logger';

// Mock the UpdateGenreadingService
jest.mock('./updategenreading.service');
jest.mock('../common/logger/logger', () => ({
  info: jest.fn(),
  debug: jest.fn(),
  error: jest.fn(),
}));

describe('UpdateGenReadingController', () => {
  let controller: UpdateGenReadingController;
  let updateGenReadingService: UpdateGenreadingService;
  let req: Request;
  let res: Response;
  let logInfo: jest.Mock;
  let logError: jest.Mock;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [UpdateGenReadingController],
      providers: [UpdateGenreadingService],
    }).compile();

    controller = module.get<UpdateGenReadingController>(UpdateGenReadingController);
    updateGenReadingService = module.get<UpdateGenreadingService>(UpdateGenreadingService);

    // Mocking the request and response objects
    req = {
      body: { readings: [{ value: 'newData' }], userid: 'user1', pm_unid: 123 },
      headers: {},
    } as unknown as Request;
    res = {
      send: jest.fn(),
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    } as unknown as Response;

    logInfo = logger.info as jest.Mock;
    logError = logger.error as jest.Mock;
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  it('should call the update service and return data on success', async () => {
    const mockData = { message: 'Readings added/updated successfully', data: req.body };
    jest.spyOn(updateGenReadingService, 'updateDetails').mockResolvedValue(mockData);

    await controller.putGenReading(req, res);

    expect(res.send).toHaveBeenCalledWith(mockData);
    expect(logInfo).toHaveBeenCalledWith('Processing request to update PM genreading.');
    expect(logInfo).toHaveBeenCalledWith('Updating genreading details.');
    expect(logInfo).toHaveBeenCalledWith('Successfully updated genreading details.');
    expect(logError).not.toHaveBeenCalled();
  });

  it('should return an error response and log error on failure', async () => {
    const error = new Error('Error in update');
    jest.spyOn(updateGenReadingService, 'updateDetails').mockRejectedValue(error);

    await controller.putGenReading(req, res);

    expect(res.status).toHaveBeenCalledWith(500);
    expect(res.json).toHaveBeenCalledWith({ message: 'Internal server error', error: error.message });
    expect(logError).toHaveBeenCalledWith('Error in updating genreading.', {
      errorMessage: error.message,
      stack: error.stack,
    });
  });
});
---------------
import { Test, TestingModule } from '@nestjs/testing';
import { UpdateGenreadingService } from './updategenreading.service';
import { UpdateGenReadingRepo } from './updategenreading.repo';

// Mock the UpdateGenReadingRepo
jest.mock('./updategenreading.repo');

describe('UpdateGenreadingService', () => {
  let service: UpdateGenreadingService;
  let repo: UpdateGenReadingRepo;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [UpdateGenreadingService, UpdateGenReadingRepo],
    }).compile();

    service = module.get<UpdateGenreadingService>(UpdateGenreadingService);
    repo = module.get<UpdateGenReadingRepo>(UpdateGenReadingRepo);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  it('should call UpdateGenReadingRepo and return data on success', async () => {
    const mockResponse = { message: 'Readings added/updated successfully', data: { readings: [] } };
    jest.spyOn(repo, 'updategenreading').mockResolvedValue(1);

    const result = await service.updateDetails({ body: { readings: [], userid: 'user', pm_unid: 1 } });

    expect(result).toEqual(mockResponse);
    expect(repo.updategenreading).toHaveBeenCalled();
  });

  it('should throw an error if UpdateGenReadingRepo fails', async () => {
    const error = new Error('Error in repository');
    jest.spyOn(repo, 'updategenreading').mockRejectedValue(error);

    try {
      await service.updateDetails({ body: { readings: [], userid: 'user', pm_unid: 1 } });
    } catch (e) {
      expect(e.message).toBe('Error in repository');
    }
  });
});
------------
import { Test, TestingModule } from '@nestjs/testing';
import { UpdateGenReadingRepo } from './updategenreading.repo';
import { Oracle } from '../common/database/oracle';
import { queries } from './updategenreading.qFactory';

// Mock the Oracle class
jest.mock('../common/database/oracle');

describe('UpdateGenReadingRepo', () => {
  let repo: UpdateGenReadingRepo;
  let oraUtil: Oracle;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [UpdateGenReadingRepo, Oracle],
    }).compile();

    repo = module.get<UpdateGenReadingRepo>(UpdateGenReadingRepo);
    oraUtil = module.get<Oracle>(Oracle);
  });

  it('should be defined', () => {
    expect(repo).toBeDefined();
  });

  it('should call the Oracle query and return affected rows on success', async () => {
    const mockAffectedRows = { rowsAffected: 1 };
    jest.spyOn(oraUtil, 'executeQuery').mockResolvedValue(mockAffectedRows);

    const result = await repo.updategenreading({ body: { readings: [], userid: 'user', pm_unid: 1 } });

    expect(result).toBe(1);
    expect(oraUtil.executeQuery).toHaveBeenCalledWith(queries.updategenreading, [
      '{"value":"newData"}', 'user', 1
    ]);
  });

  it('should throw an error if executeQuery fails', async () => {
    const error = new Error('Database error');
    jest.spyOn(oraUtil, 'executeQuery').mockRejectedValue(error);

    try {
      await repo.updategenreading({ body: { readings: [], userid: 'user', pm_unid: 1 } });
    } catch (e) {
      expect(e.message).toBe('Database error');
    }
  });
});

===============================
  updateGenReading/updategenreading.controller.spec.ts (9.651 s)
  ● UpdateGenReadingController › should be defined

    TypeError: Cannot read properties of undefined (reading 'info')

      41 |     } as unknown as Response;
      42 |
    > 43 |     logInfo = logger.info as jest.Mock;
         |                      ^
      44 |     logError = logger.error as jest.Mock;
      45 |   });
      46 |

      at Object.<anonymous> (updateGenReading/updategenreading.controller.spec.ts:43:22)

  ● UpdateGenReadingController › should call the update service and return data on success

    TypeError: Cannot read properties of undefined (reading 'info')

      41 |     } as unknown as Response;
      42 |
    > 43 |     logInfo = logger.info as jest.Mock;
         |                      ^
      44 |     logError = logger.error as jest.Mock;
      45 |   });
      46 |

      at Object.<anonymous> (updateGenReading/updategenreading.controller.spec.ts:43:22)

  ● UpdateGenReadingController › should return an error response and log error on failure

    TypeError: Cannot read properties of undefined (reading 'info')

      41 |     } as unknown as Response;
      42 |
    > 43 |     logInfo = logger.info as jest.Mock;
         |                      ^
      44 |     logError = logger.error as jest.Mock;
      45 |   });
      46 |

      at Object.<anonymous> (updateGenReading/updategenreading.controller.spec.ts:43:22)

UUUUUUUUUUUUUU
import { Test, TestingModule } from '@nestjs/testing';
import { UpdateGenReadingController } from './updategenreading.controller';
import { UpdateGenreadingService } from './updategenreading.service';
import { Response, Request } from 'express';
import logger from '../common/logger/logger'; // import the logger

// Mock the UpdateGenreadingService
jest.mock('./updategenreading.service');

// Mock the logger
jest.mock('../common/logger/logger', () => ({
  info: jest.fn(),
  debug: jest.fn(),
  error: jest.fn(),
}));

describe('UpdateGenReadingController', () => {
  let controller: UpdateGenReadingController;
  let updateGenReadingService: UpdateGenreadingService;
  let req: Request;
  let res: Response;
  let logInfo: jest.Mock;
  let logError: jest.Mock;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [UpdateGenReadingController],
      providers: [UpdateGenreadingService],
    }).compile();

    controller = module.get<UpdateGenReadingController>(UpdateGenReadingController);
    updateGenReadingService = module.get<UpdateGenreadingService>(UpdateGenreadingService);

    // Mocking the request and response objects
    req = {
      body: { readings: [{ value: 'newData' }], userid: 'user1', pm_unid: 123 },
      headers: {},
    } as unknown as Request;
    res = {
      send: jest.fn(),
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    } as unknown as Response;

    // Initialize mock methods for logger
    logInfo = logger.info as jest.Mock;
    logError = logger.error as jest.Mock;
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  it('should call the update service and return data on success', async () => {
    const mockData = { message: 'Readings added/updated successfully', data: req.body };
    jest.spyOn(updateGenReadingService, 'updateDetails').mockResolvedValue(mockData);

    await controller.putGenReading(req, res);

    expect(res.send).toHaveBeenCalledWith(mockData);
    expect(logInfo).toHaveBeenCalledWith('Processing request to update PM genreading.');
    expect(logInfo).toHaveBeenCalledWith('Updating genreading details.');
    expect(logInfo).toHaveBeenCalledWith('Successfully updated genreading details.');
    expect(logError).not.toHaveBeenCalled();
  });

  it('should return an error response and log error on failure', async () => {
    const error = new Error('Error in update');
    jest.spyOn(updateGenReadingService, 'updateDetails').mockRejectedValue(error);

    await controller.putGenReading(req, res);

    expect(res.status).toHaveBeenCalledWith(500);
    expect(res.json).toHaveBeenCalledWith({ message: 'Internal server error', error: error.message });
    expect(logError).toHaveBeenCalledWith('Error in updating genreading.', {
      errorMessage: error.message,
      stack: error.stack,
    });
  });
});
==========
import { Test, TestingModule } from '@nestjs/testing';
import { UpdateGenreadingService } from './updategenreading.service';
import UpdateGenReadingRepo from './updategenreading.repo';

// Mock the repository
jest.mock('./updategenreading.repo');

describe('UpdateGenreadingService', () => {
  let updateGenreadingService: UpdateGenreadingService;
  let updateGenReadingRepo: UpdateGenReadingRepo;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [UpdateGenreadingService, UpdateGenReadingRepo],
    }).compile();

    updateGenreadingService = module.get<UpdateGenreadingService>(UpdateGenreadingService);
    updateGenReadingRepo = module.get<UpdateGenReadingRepo>(UpdateGenReadingRepo);
  });

  it('should be defined', () => {
    expect(updateGenreadingService).toBeDefined();
  });

  it('should call UpdateGenReadingRepo and return success message', async () => {
    const mockData = { message: 'Readings added/updated successfully', data: {} };
    jest.spyOn(updateGenReadingRepo, 'updategenreading').mockResolvedValue(mockData);

    const result = await updateGenreadingService.updateDetails({ body: { readings: [{}], userid: 'user1', pm_unid: 123 } });

    expect(result).toEqual(mockData);
    expect(updateGenReadingRepo.updategenreading).toHaveBeenCalled();
  });

  it('should throw an error if UpdateGenReadingRepo fails', async () => {
    const error = new Error('Error in repo');
    jest.spyOn(updateGenReadingRepo, 'updategenreading').mockRejectedValue(error);

    try {
      await updateGenreadingService.updateDetails({ body: { readings: [{}], userid: 'user1', pm_unid: 123 } });
    } catch (e) {
      expect(e.message).toBe(error.message);
    }
  });
});
=======
import { Test, TestingModule } from '@nestjs/testing';
import UpdateGenReadingRepo from './updategenreading.repo';
import { Oracle } from '../common/database/oracle';
import * as config from 'config';

// Mock the Oracle service
jest.mock('../common/database/oracle');

describe('UpdateGenReadingRepo', () => {
  let updateGenReadingRepo: UpdateGenReadingRepo;
  let oraUtil: Oracle;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [UpdateGenReadingRepo, Oracle],
    }).compile();

    updateGenReadingRepo = module.get<UpdateGenReadingRepo>(UpdateGenReadingRepo);
    oraUtil = module.get<Oracle>(Oracle);
  });

  it('should be defined', () => {
    expect(updateGenReadingRepo).toBeDefined();
  });

  it('should update genreading and return affected rows', async () => {
    const mockData = { rowsAffected: 1 };
    const query = `UPDATE opspm.pm_location_task 
                   SET SPECIFIC_DATA_VALUE = :SPECIFIC_DATA_VALUE, 
                   META_LAST_UPDATED_DATE = sys_extract_utc(systimestamp), 
                   META_LAST_UPDATED_BY = :META_CREATED_BY 
                   WHERE PM_HEADER_ID = :pm_unid`;

    jest.spyOn(oraUtil, 'executeQuery').mockResolvedValue(mockData);

    const result = await updateGenReadingRepo.updategenreading({ body: { readings: [{}], userid: 'user1', pm_unid: 123 } });

    expect(result).toEqual(1);
    expect(oraUtil.executeQuery).toHaveBeenCalledWith(query, expect.any(Array));
  });

  it('should throw an error if the database query fails', async () => {
    const error = new Error('Database error');
    jest.spyOn(oraUtil, 'executeQuery').mockRejectedValue(error);

    try {
      await updateGenReadingRepo.updategenreading({ body: { readings: [{}], userid: 'user1', pm_unid: 123 } });
    } catch (e) {
      expect(e.message).toBe(error.message);
    }
  });
});
