import { Test, TestingModule } from '@nestjs/testing';
import { UpdateGenReadingRepo } from './updategenreading.repo';
import { Oracle } from '../common/database/oracle';
import { queries } from './updategenreading.qFactory';

describe('UpdateGenReadingRepo', () => {
  let repo: UpdateGenReadingRepo;
  let oraUtil: Oracle;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UpdateGenReadingRepo,
        {
          provide: Oracle,
          useValue: {
            executeQuery: jest.fn(),
          },
        },
      ],
    }).compile();

    repo = module.get<UpdateGenReadingRepo>(UpdateGenReadingRepo);
    oraUtil = module.get<Oracle>(Oracle);
  });

  it('should be defined', () => {
    expect(repo).toBeDefined();
  });

  it('should call executeQuery to update readings and fetch metadata', async () => {
    const reqBody = {
      pm_unid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: [
        {
          ac_voltage: '24.10',
          ac_current: '72.00',
          oil_level: '0.25',
          fuel_level1: '0.87',
          fuel_level2: '0.00',
          fuel_level3: '0.00',
          fuel_level4: '0.00',
          totalruntime: '123',
        },
      ],
    };

    const mockFetchData = {
      rows: [
        {
          META_CREATED_BY: 'rhymeri',
          META_CREATED_DATE: '2023-02-03 11:54:03',
          META_LAST_UPDATED_BY: 'collja',
          META_LAST_UPDATED_DATE: '2024-11-10 23:42:47',
        },
      ],
    };

    jest.spyOn(oraUtil, 'executeQuery').mockResolvedValueOnce(mockFetchData);

    const result = await repo.updategenreading(reqBody);

    expect(oraUtil.executeQuery).toHaveBeenCalledTimes(2);
    expect(result).toEqual([
      {
        ac_voltage: '24.10',
        ac_current: '72.00',
        oil_level: '0.25',
        fuel_level1: '0.87',
        fuel_level2: '0.00',
        fuel_level3: '0.00',
        fuel_level4: '0.00',
        totalruntime: '123',
        meta_createdby: 'rhymeri',
        meta_createddate: '2023-02-03 11:54:03',
        meta_lastupdateby: 'collja',
        meta_lastupdatedate: '2024-11-10 23:42:47',
      },
    ]);
  });


++++++++++++++++++
import { Test, TestingModule } from '@nestjs/testing';
import { UpdateGenreadingService } from './updategenreading.service';
import { UpdateGenReadingRepo } from './updategenreading.repo';

describe('UpdateGenreadingService', () => {
  let service: UpdateGenreadingService;
  let repo: UpdateGenReadingRepo;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UpdateGenreadingService,
        {
          provide: UpdateGenReadingRepo,
          useValue: {
            updategenreading: jest.fn(),
          },
        },
      ],
    }).compile();

    service = module.get<UpdateGenreadingService>(UpdateGenreadingService);
    repo = module.get<UpdateGenReadingRepo>(UpdateGenReadingRepo);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  it('should return updated readings with metadata on success', async () => {
    const reqBody = {
      pm_unid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: [
        {
          ac_voltage: '24.10',
          ac_current: '72.00',
          oil_level: '0.25',
          fuel_level1: '0.87',
          fuel_level2: '0.00',
          fuel_level3: '0.00',
          fuel_level4: '0.00',
          totalruntime: '123',
        },
      ],
    };

    const mockResult = [
      {
        ac_voltage: '24.10',
        ac_current: '72.00',
        oil_level: '0.25',
        fuel_level1: '0.87',
        fuel_level2: '0.00',
        fuel_level3: '0.00',
        fuel_level4: '0.00',
        totalruntime: '123',
        meta_createdby: 'rhymeri',
        meta_createddate: '2023-02-03 11:54:03',
        meta_lastupdateby: 'collja',
        meta_lastupdatedate: '2024-11-10 23:42:47',
      },
    ];

    jest.spyOn(repo, 'updategenreading').mockResolvedValue(mockResult);

    const result = await service.updateDetails(reqBody);

    expect(result).toEqual({
      pmunid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: mockResult,
    });
  });

  it('should throw an error if the repository fails', async () => {
    const reqBody = { pm_unid: '4F97CD39DE06DCAB696F151C3F92E508', userid: 'collja', readings: [] };

    jest.spyOn(repo, 'updategenreading').mockRejectedValue(new Error('Database error'));

    await expect(service.updateDetails(reqBody)).rejects.toThrowError('Failed to update readings: Database error');
  });
});


++++++++++++++++++++++++++++
import { Test, TestingModule } from '@nestjs/testing';
import { UpdateGenReadingController } from './updategenreading.controller';
import { UpdateGenreadingService } from './updategenreading.service';
import { Response } from 'express';
import { BadRequestException } from '@nestjs/common';

describe('UpdateGenReadingController', () => {
  let controller: UpdateGenReadingController;
  let service: UpdateGenreadingService;
  let mockResponse: Partial<Response>;

  beforeEach(async () => {
    mockResponse = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };

    const module: TestingModule = await Test.createTestingModule({
      controllers: [UpdateGenReadingController],
      providers: [
        {
          provide: UpdateGenreadingService,
          useValue: {
            updateDetails: jest.fn(),
          },
        },
      ],
    }).compile();

    controller = module.get<UpdateGenReadingController>(UpdateGenReadingController);
    service = module.get<UpdateGenreadingService>(UpdateGenreadingService);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  it('should call updateDetails and return 200 on success', async () => {
    const result = {
      pm_unid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: [],
    };
    const reqBody = {
      pm_unid: '4F97CD39DE06DCAB696F151C3F92E508',
      userid: 'collja',
      readings: [],
    };

    jest.spyOn(service, 'updateDetails').mockResolvedValue(result);

    await controller.putGenReading({ body: reqBody }, mockResponse as Response);

    expect(mockResponse.status).toHaveBeenCalledWith(200);
    expect(mockResponse.json).toHaveBeenCalledWith({
      message: 'Readings added/updated successfully',
      data: result,
    });
  });

  it('should return 500 if service throws an error', async () => {
    const reqBody = { pm_unid: '4F97CD39DE06DCAB696F151C3F92E508', userid: 'collja', readings: [] };

    jest.spyOn(service, 'updateDetails').mockRejectedValue(new Error('Service error'));

    await controller.putGenReading({ body: reqBody }, mockResponse as Response);

    expect(mockResponse.status).toHaveBeenCalledWith(500);
    expect(mockResponse.json).toHaveBeenCalledWith({
      message: 'Error updating readings',
      error: 'Service error',
      statusCode: 500,
    });
  });
});



=======
import { Controller, Put, Req, Res } from '@nestjs/common';
import { UpdateGenreadingService } from './updategenreading.service';
import { ApiTags } from '@nestjs/swagger';
import { Response } from 'express';

@ApiTags('Generator Readings')
@Controller('ioppm')
export class UpdateGenReadingController {
  constructor(private readonly updateGenreadingService: UpdateGenreadingService) { }

  @Put('/update/pm/genreading')
  async putGenReading(@Req() req: any, @Res() res: Response) {
    try {
      const reqBody = req.body;

      // Call the service to update the readings and get the response
      const result = await this.updateGenreadingService.updateDetails(reqBody);

      // Return the result with the expected response format
      return res.status(200).json({
        message: 'Readings added/updated successfully',
        data: result,
      });
    } catch (err) {
      // Return the error in the expected response format
      return res.status(500).json({
        message: 'Error updating readings',
        error: err.message || err,
        statusCode: 500,
      });
    }
  }
}
====
import { Injectable } from '@nestjs/common';
import { UpdateGenReadingRepo } from './updategenreading.repo';

@Injectable()
export class UpdateGenreadingService {
  constructor(private updateGenReadingRepo: UpdateGenReadingRepo) { }

  async updateDetails(reqBody: any) {
    try {
      const value = await this.updateGenReadingRepo.updategenreading(reqBody);

      return {
        pmunid: reqBody.pm_unid,
        userid: reqBody.userid,
        readings: value,
      };
    } catch (error) {
      throw new Error('Failed to update readings: ' + error.message);
    }
  }
}
=======
import { Injectable } from '@nestjs/common';
import { Oracle } from '../common/database/oracle';
import { queries } from './updategenreading.qFactory';

@Injectable()
export class UpdateGenReadingRepo {
  constructor(private oraUtil: Oracle) { }

  async updategenreading(reqBody: any): Promise<any> {
    try {
      const { pm_unid, userid, readings } = reqBody;
      let result = [];

      for (let reading of readings) {
        const {
          ac_voltage, totalruntime, ac_current,
          fuel_level1, fuel_level2, fuel_level3, fuel_level4,
          oil_level,
        } = reading;

        const acvoltage = Number(ac_voltage)
        const total_runtime = Number(totalruntime)
        const accurrent = Number(ac_current)
        const fuellevel1 = Number(fuel_level1)
        const fuellevel2 = Number(fuel_level2)
        const fuellevel3 = Number(fuel_level3)
        const fuellevel4 = Number(fuel_level4)


        const qParams = [
          acvoltage, total_runtime, accurrent, fuellevel1, fuellevel2, fuellevel3, fuellevel4,
          oil_level, userid, pm_unid
        ];
        console.log("qparams update----", qParams);

        const uQuery = queries.updategenreading;
        await this.oraUtil.executeQuery(uQuery, qParams);

        console.log("after update , b4 fetch");

        const fetchParams = reqBody.pm_unid;
        const fQuery = queries.fetchQuery;
        const data: any = await this.oraUtil.executeQuery(fQuery, [fetchParams]);
        console.log("data-------------", data);

        if (data && data.rows && data.rows.length > 0) {
          const metaData = data.rows[0];
          result.push({
            ...reading,
            meta_createddate: metaData.META_CREATED_DATE,
            meta_createdby: metaData.META_CREATED_BY,
            meta_lastupdatedate: metaData.META_LAST_UPDATED_DATE,
            meta_lastupdateby: metaData.META_LAST_UPDATED_BY
          });
        }
      }

      return result;
    } catch (error) {
      throw new Error('Database query failed: ' + error.message);
    }
  }
}
=======

export const queries = {
  updategenreading: `
    UPDATE OPSPM.PM_GENERATOR 
    SET 
      AC_VOLTAGE = :acvoltage,
      TOTAL_RUNTIME = :total_runtime,
      AC_CURRENT = :accurrent,
      FUEL_LEVEL_1 = :fuellevel1,
      FUEL_LEVEL_2 = :fuellevel2,
      FUEL_LEVEL_3 = :fuellevel3,
      FUEL_LEVEL_4 = :fuellevel4,
      OIL_LEVEL = :oil_level,
      META_LAST_UPDATED_BY = :userid,
      META_LAST_UPDATED_DATE = sys_extract_utc(systimestamp)
    WHERE SOURCE_TAG = :pm_unid`,

  fetchQuery: `
    SELECT 
      META_CREATED_BY, META_CREATED_DATE, 
      META_LAST_UPDATED_BY, META_LAST_UPDATED_DATE
    FROM OPSPM.PM_GENERATOR
    WHERE SOURCE_TAG = :fetchParams`
};
