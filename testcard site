import { Test, TestingModule } from '@nestjs/testing';
import { SCSiteController } from './sc-site.controller';
import { SCSiteService } from './scoreCardSite.service';
import { RestClient } from '../common/util/restClient/restClient.service';
import { Logger } from '../common/logger/logger';
import { Response, Request } from 'express';

jest.mock('../common/util/restClient/restClient.service');
jest.mock('../common/logger/logger');

describe('SCSiteController', () => {
  let controller: SCSiteController;
  let service: SCSiteService;
  let mockRequest: Partial<Request>;
  let mockResponse: Partial<Response>;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [SCSiteController],
      providers: [SCSiteService, RestClient, Logger],
    }).compile();

    controller = module.get<SCSiteController>(SCSiteController);
    service = module.get<SCSiteService>(SCSiteService);

    mockRequest = {};
    mockResponse = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
      send: jest.fn(),
    };
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  describe('getPmDetails', () => {
    it('should return PM details successfully', async () => {
      const loginId = 'user123';
      const query = { isGsamOffshore: 'true' };

      // Mocking service method
      const serviceSpy = jest.spyOn(service, 'getDetails').mockResolvedValueOnce(true);

      await controller.getPmDetails(mockRequest as Request, mockResponse as Response, loginId, query.isGsamOffshore);

      expect(serviceSpy).toHaveBeenCalledWith(mockRequest, mockResponse, expect.any(String));
      expect(mockResponse.status).toHaveBeenCalledWith(200);
      expect(mockResponse.send).toHaveBeenCalled();
    });

    it('should handle errors and return 500 response', async () => {
      const loginId = 'user123';
      const query = { isGsamOffshore: 'false' };

      // Mocking service method to throw an error
      const serviceSpy = jest.spyOn(service, 'getDetails').mockRejectedValueOnce(new Error('Service error'));

      await controller.getPmDetails(mockRequest as Request, mockResponse as Response, loginId, query.isGsamOffshore);

      expect(serviceSpy).toHaveBeenCalled();
      expect(mockResponse.status).toHaveBeenCalledWith(500);
      expect(mockResponse.json).toHaveBeenCalledWith('Error in getting the details');
    });
  });
});
+++++++++++
  import { Test, TestingModule } from '@nestjs/testing';
import { SCSiteService } from './scoreCardSite.service';
import { RestClient } from '../common/util/restClient/restClient.service';

jest.mock('../common/util/restClient/restClient.service');

describe('SCSiteService', () => {
  let service: SCSiteService;
  let restClient: RestClient;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [SCSiteService, RestClient],
    }).compile();

    service = module.get<SCSiteService>(SCSiteService);
    restClient = module.get<RestClient>(RestClient);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  describe('getDetails', () => {
    it('should return data successfully', async () => {
      const url = 'http://example.com/api/data';
      const mockData = { data: 'sample data' };

      // Mock RestClient.get1 method to return a resolved promise
      jest.spyOn(restClient, 'get1').mockResolvedValueOnce(mockData);

      const mockResponse = { send: jest.fn(), status: jest.fn().mockReturnThis() };
      await service.getDetails({}, mockResponse, url);

      expect(restClient.get1).toHaveBeenCalledWith(url, expect.any(Object), '', '', '');
      expect(mockResponse.status).toHaveBeenCalledWith(200);
      expect(mockResponse.send).toHaveBeenCalledWith(mockData.data);
    });

    it('should handle errors and call res.status(500)', async () => {
      const url = 'http://example.com/api/data';

      // Mock RestClient.get1 to reject with an error
      jest.spyOn(restClient, 'get1').mockRejectedValueOnce(new Error('Request failed'));

      const mockResponse = { status: jest.fn().mockReturnThis(), json: jest.fn() };
      await service.getDetails({}, mockResponse, url);

      expect(mockResponse.status).toHaveBeenCalledWith(500);
      expect(mockResponse.json).toHaveBeenCalledWith('Error in getting the details');
    });
  });
});
============
  
FAIL  src/scoreCardSwitch/scoreCardSwitch.service.spec.ts                                                                           
  ● Test suite failed to run
                                                                                                                                     
    Your test suite must contain at least one test.                                                                                  
                                                                                                                                     
      at onResult (../node_modules/@jest/core/build/TestScheduler.js:133:18)                                                         
      at ../node_modules/@jest/core/build/TestScheduler.js:254:19                                                                    
      at ../node_modules/emittery/index.js:363:13                                                                                    
          at Array.map (<anonymous>)                                                                                                 
      at Emittery.emit (../node_modules/emittery/index.js:361:23)

 PASS  src/genInfo/genInfo.sevice.spec.ts
 FAIL  src/scoreCardSwitch/scoreCardSwitch.controller.spec.ts
  ● Test suite failed to run
                                                                                                                                     
    Your test suite must contain at least one test.                                                                                  
                                                                                                                                     
      at onResult (../node_modules/@jest/core/build/TestScheduler.js:133:18)                                                         
      at ../node_modules/@jest/core/build/TestScheduler.js:254:19                                                                    
      at ../node_modules/emittery/index.js:363:13                                                                                    
          at Array.map (<anonymous>)                                                                                                 
      at Emittery.emit (../node_modules/emittery/index.js:361:23)

 PASS  src/app.controller.spec.ts

Summary of all failing tests
 FAIL  scoreCardSite/scoreCardSite.controller.spec.ts
  ● Test suite failed to run

    src/scoreCardSite/scoreCardSite.controller.spec.ts:2:34 - error TS2307: Cannot find module './sc-site.controller' or its corresponding type declarations.

    2 import { SCSiteController } from './sc-site.controller';
                                       ~~~~~~~~~~~~~~~~~~~~~~
    src/scoreCardSite/scoreCardSite.controller.spec.ts:5:10 - error TS2614: Module '"../common/logger/logger"' has no exported member 'Logger'. Did you mean to use 'import Logger from "../common/logger/logger"' instead?

    5 import { Logger } from '../common/logger/logger';
               ~~~~~~
    src/scoreCardSite/scoreCardSite.controller.spec.ts:44:88 - error TS2345: Argument of type 'boolean' is not assignable to parameter of type 'void | Promise<void>'.

    44             const serviceSpy = jest.spyOn(service, 'getDetails').mockResolvedValueOnce(true);
                                                                                              ~~~~

 FAIL  scoreCardSite/scoreCardSite.service.spec.ts
  ● Test suite failed to run

    src/scoreCardSite/scoreCardSite.service.spec.ts:30:66 - error TS2345: Argument of type '{ data: string; }' is not assignable to parameter of type 'never'.

    30             jest.spyOn(restClient, 'get1').mockResolvedValueOnce(mockData);
                                                                        ~~~~~~~~
    src/scoreCardSite/scoreCardSite.service.spec.ts:44:66 - error TS2345: Argument of type 'Error' is not assignable to parameter of type 'never'.

    44             jest.spyOn(restClient, 'get1').mockRejectedValueOnce(new Error('Request failed'));
                                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~

 FAIL  scoreCardSwitch/scoreCardSwitch.service.spec.ts
  ● Test suite failed to run

    Your test suite must contain at least one test.

      at onResult (../node_modules/@jest/core/build/TestScheduler.js:133:18)
      at ../node_modules/@jest/core/build/TestScheduler.js:254:19
      at ../node_modules/emittery/index.js:363:13
          at Array.map (<anonymous>)
      at Emittery.emit (../node_modules/emittery/index.js:361:23)

 FAIL  scoreCardSwitch/scoreCardSwitch.controller.spec.ts
  ● Test suite failed to run

    Your test suite must contain at least one test.
