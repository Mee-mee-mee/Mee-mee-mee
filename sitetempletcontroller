import {
  Controller,
  Param,
  Get,
  Req,
  Res,
  NotFoundException,
} from '@nestjs/common';
import { PmSiteTemplateService } from './pmSiteTemplate.service';
import { ApiTags } from '@nestjs/swagger';
import logger from '../common/logger/logger';
import { Request, Response } from 'express';

@Controller('ioppm')
@ApiTags('Default')
export class PmSiteTemplateController {
  constructor(private readonly pmSiteTemplateService: PmSiteTemplateService) {}

  // Getting PM Template for a specific site
  @Get('/site/:siteUnId/pmTemplates')
  async getPmTemplateBySite(
    @Param('siteUnId') siteUnId: string,
    @Req() req: Request,
    @Res() res: Response,
  ) {
    logger.info('Processing request to fetch PM templates for a specific site.');
    logger.debug('Request parameters:', { siteUnId });
    logger.debug('Request headers:', { headers: req.headers });

    try {
      logger.info('Fetching PM templates for site.', { siteUnId });
      const result: any = await this.pmSiteTemplateService.getPmTemplates(siteUnId);
      logger.debug('Raw result from service:', { result });

      if (result) {
        const rows = result?.rows || [];
        if (rows && rows.length > 0) {
          logger.info('PM templates found for the site.', { siteUnId, templatesCount: rows.length });
          const templates = rows.map((template) => ({
            name: template.TEMPLATE_NAME,
            listTemplateId: template.LIST_TEMPLATE_ID,
            description: template.TEMPLATE_DESC,
            isDisabled: template.IS_DISABLED,
            frequency: template.FREQUENCY_NAME,
          }));
          return res.json({
            siteUnId: siteUnId,
            templates,
          });
        }
      }

      logger.info('No PM templates found for the site.', { siteUnId });
      return res.status(200).json({
        siteUnid: siteUnId,
        templates: [],
      });
    } catch (err) {
      logger.error('Error while fetching PM templates for the site.', { errorMessage: err.message, stack: err.stack });
      logger.debug('Error details:', { error: err });
      return res.status(500).json({ message: 'Internal server error', error: err.message });
    }
  }
}

+++++++++++++++
import { Injectable } from "@nestjs/common";
import { PmSiteTemplateRepository}  from "./pmSiteTemplate.repo";
import logger from "../common/logger/logger";

@Injectable()
export class PmSiteTemplateService {
  constructor(private pmSiteTemplateRepo: PmSiteTemplateRepository ) {}
  async getPmTemplates(siteUnId:string){
    
    try{
      const result = await this.pmSiteTemplateRepo.testFunc(siteUnId);
      return result;
    }catch(err){
      logger.error("Unable to fetch templates",err)
      throw new Error('Service Error: Unable to fetch template')
    };
  };
}
====
import { Injectable, Logger } from "@nestjs/common";
import {Oracle}  from "../common/database/oracle";
import { queries} from "./pmSiteTemplate.qfactory";

import logger from '../common/logger/logger';
//let oracleobject = new Oracle();
@Injectable()
export class PmSiteTemplateRepository {
  constructor(private connection: Oracle) {}
  async testFunc(siteUnId){
    try{
    let templatesQuery=queries.getSitePmTemplates;
    const params = [siteUnId]
    let result = await this.connection.executeQuery(templatesQuery,params);
    return result;
    }catch(err){
      logger.error("No templates found",err)
      throw err;
    }
  }
}
TTTTTTTTTTTTTTTTT

import { Test, TestingModule } from '@nestjs/testing';
import { PmSiteTemplateController } from './pmSiteTemplate.controller';
import { PmSiteTemplateService } from './pmSiteTemplate.service';
import { Response, Request } from 'express';

jest.mock('./pmSiteTemplate.service');

describe('PmSiteTemplateController', () => {
  let controller: PmSiteTemplateController;
  let service: PmSiteTemplateService;
  let req: Request;
  let res: Response;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [PmSiteTemplateController],
      providers: [PmSiteTemplateService],
    }).compile();

    controller = module.get<PmSiteTemplateController>(PmSiteTemplateController);
    service = module.get<PmSiteTemplateService>(PmSiteTemplateService);

    req = { headers: {} } as Request;
    res = {
      json: jest.fn(),
      status: jest.fn().mockReturnThis(),
    } as unknown as Response;
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  it('should return PM templates for a site', async () => {
    const siteUnId = '123';
    const mockData = {
      rows: [
        { TEMPLATE_NAME: 'Template1', LIST_TEMPLATE_ID: '1', TEMPLATE_DESC: 'Desc1', IS_DISABLED: false, FREQUENCY_NAME: 'Monthly' },
        { TEMPLATE_NAME: 'Template2', LIST_TEMPLATE_ID: '2', TEMPLATE_DESC: 'Desc2', IS_DISABLED: false, FREQUENCY_NAME: 'Weekly' },
      ],
    };

    jest.spyOn(service, 'getPmTemplates').mockResolvedValue(mockData);

    await controller.getPmTemplateBySite(siteUnId, req, res);

    expect(res.json).toHaveBeenCalledWith({
      siteUnId,
      templates: [
        { name: 'Template1', listTemplateId: '1', description: 'Desc1', isDisabled: false, frequency: 'Monthly' },
        { name: 'Template2', listTemplateId: '2', description: 'Desc2', isDisabled: false, frequency: 'Weekly' },
      ],
    });
  });

  it('should return empty array if no PM templates found', async () => {
    const siteUnId = '123';
    const mockData = { rows: [] };

    jest.spyOn(service, 'getPmTemplates').mockResolvedValue(mockData);

    await controller.getPmTemplateBySite(siteUnId, req, res);

    expect(res.json).toHaveBeenCalledWith({ siteUnId, templates: [] });
  });

  it('should return internal server error on exception', async () => {
    const siteUnId = '123';
    const error = new Error('Service Error');
    jest.spyOn(service, 'getPmTemplates').mockRejectedValue(error);

    await controller.getPmTemplateBySite(siteUnId, req, res);

    expect(res.status).toHaveBeenCalledWith(500);
    expect(res.json).toHaveBeenCalledWith({
      message: 'Internal server error',
      error: error.message,
    });
  });
});
===========
import { Test, TestingModule } from '@nestjs/testing';
import { PmSiteTemplateService } from './pmSiteTemplate.service';
import { PmSiteTemplateRepository } from './pmSiteTemplate.repo';

jest.mock('./pmSiteTemplate.repo');

describe('PmSiteTemplateService', () => {
  let service: PmSiteTemplateService;
  let repo: PmSiteTemplateRepository;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [PmSiteTemplateService, PmSiteTemplateRepository],
    }).compile();

    service = module.get<PmSiteTemplateService>(PmSiteTemplateService);
    repo = module.get<PmSiteTemplateRepository>(PmSiteTemplateRepository);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  it('should return PM templates data from repository', async () => {
    const siteUnId = '123';
    const mockData = {
      rows: [
        { TEMPLATE_NAME: 'Template1', LIST_TEMPLATE_ID: '1', TEMPLATE_DESC: 'Desc1', IS_DISABLED: false, FREQUENCY_NAME: 'Monthly' },
      ],
    };
    jest.spyOn(repo, 'testFunc').mockResolvedValue(mockData);

    const result = await service.getPmTemplates(siteUnId);

    expect(result).toEqual(mockData);
  });

  it('should throw an error if repository fails', async () => {
    const error = new Error('Error fetching templates');
    jest.spyOn(repo, 'testFunc').mockRejectedValue(error);

    await expect(service.getPmTemplates('123')).rejects.toThrow('Service Error: Unable to fetch template');
  });
});
========
import { Test, TestingModule } from '@nestjs/testing';
import { PmSiteTemplateRepository } from './pmSiteTemplate.repo';
import { Oracle } from '../common/database/oracle';

jest.mock('../common/database/oracle');

describe('PmSiteTemplateRepository', () => {
  let repo: PmSiteTemplateRepository;
  let connection: Oracle;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [PmSiteTemplateRepository, Oracle],
    }).compile();

    repo = module.get<PmSiteTemplateRepository>(PmSiteTemplateRepository);
    connection = module.get<Oracle>(Oracle);
  });

  it('should be defined', () => {
    expect(repo).toBeDefined();
  });

  it('should fetch PM templates data from database', async () => {
    const mockData = {
      rows: [
        { TEMPLATE_NAME: 'Template1', LIST_TEMPLATE_ID: '1', TEMPLATE_DESC: 'Desc1', IS_DISABLED: false, FREQUENCY_NAME: 'Monthly' },
      ],
    };

    jest.spyOn(connection, 'executeQuery').mockResolvedValue(mockData);

    const result = await repo.testFunc('123');

    expect(result).toEqual(mockData);
  });

  it('should throw an error if database query fails', async () => {
    const error = new Error('Database query failed');
    jest.spyOn(connection, 'executeQuery').mockRejectedValue(error);

    await expect(repo.testFunc('123')).rejects.toThrow(error);
  });
});

