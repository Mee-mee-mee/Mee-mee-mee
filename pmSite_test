import { Controller, Param, Get, Req, Res } from '@nestjs/common';
import { PmSiteService } from './pmSite.service';
import { ApiTags } from '@nestjs/swagger';
import logger from '../common/logger/logger';
import { Request, Response } from 'express';

const config = require('config');

@Controller('ioppm')
@ApiTags('Default')
export class PmSiteController {
  constructor(private readonly pmSiteService: PmSiteService) {}

  // Getting PM tasks for a specific site
  @Get('/site/:siteUnid/pm')
  async getPmBySite(
    @Param('siteUnid') siteUnid: string,
    @Req() req: Request,
    @Res() res: Response,
  ) {
    logger.info('Processing request to fetch PM tasks for a specific site.');
    logger.debug('Request parameters:', { siteUnid });
    logger.debug('Request headers:', { headers: req.headers });

    try {
      logger.info('Fetching PM tasks for site.', { siteUnid });
      const data: any = await this.pmSiteService.PmData(siteUnid);
      logger.debug('Retrieved data for site:', { data });

      if (!data || data.length === 0) {
        logger.info('No tasks found for the provided site.', { siteUnid });
        return res.status(204).send();
      }

      logger.info('Successfully fetched PM tasks for the site.', { siteUnid });
      return res.send(data);
    } catch (err) {
      logger.error('Error while fetching PM tasks for the site.', { errorMessage: err.message, stack: err.stack });
      logger.debug('Error details:', { error: err });
      return res.status(500).json({ message: 'Internal server error', error: err.message });
    }
  }
}

++++++++++++++++++++
import { Injectable } from '@nestjs/common';
import PmSiteRepo from './pmSite.repo';

@Injectable()
export class PmSiteService {
    constructor(private PmSiteRepo: PmSiteRepo) {}

   

    async PmData(siteUnid) {
        try {
            const data = await this.PmSiteRepo.getPmBySite(siteUnid);

            // Convert keys to lowercase and wrap data inside pmlist
            const transformedData = data.map(item => {
                const lowerCaseItem = {};
                for (const key in item) {
                    if (item.hasOwnProperty(key)) {
                        lowerCaseItem[key.toLowerCase()] = item[key];
                    }
                }
                return lowerCaseItem;
            });

            return { pmlist: transformedData };
        } catch (error) {
            throw error;
        }
    }
}

+++++++++++++++
import { Injectable } from '@nestjs/common';
import  {Oracle}  from '../common/database/oracle';
import { queries } from './pmSite.qFactory';
import  {reformatDates} from '../common/utils/common_util';


@Injectable()
export default class PmSiteRepo {
  constructor(private oraUtil: Oracle) {}

  async getPmBySite(siteUnid){
    try{
    const query = queries.getPmBySite;
    const qParams=[siteUnid];
    let data: any = await this.oraUtil.executeQuery(query, qParams);
      // data = data.rows;

      data = data.rows.map((item) => ({
        ...item,
        STARTDATE: item["STARTDATE"]
          ? reformatDates(item["STARTDATE"])
              :null,
STOPDATE: item["STOPDATE"]
          ? reformatDates(item["STOPDATE"])
              :null,NUMTASKS:item.NUMTASKS==null?0:item.NUMTASKS,NUMTASKSDONE:item.NUMTASKSDONE==null?0:item.NUMTASKSDONE
      }));
      
      
      return data;
    } catch (error) {
      throw error;
    }
}
}

+++++++++++
export const queries = {
  getPmBySite: `SELECT 
    pmd_widget_pm_details.LIST_NAME AS listname, 
    pmd_widget_pm_details.FREQUENCY AS frequency,
    pmd_widget_pm_details.SWITCH_NAME AS switch,  
    pmd_widget_pm_details.SITE_NAME AS site_name, 
    pmd_widget_pm_details.SITE_UNID AS site_unid, 
    pmd_widget_pm_details.NUM_OF_TASKS AS numtasks, 
    pmd_widget_pm_details.NUM_OF_TASKS_DONE AS numtasksdone, 
     to_char (pmd_widget_pm_details.START_DATE) AS startdate, 
    to_char (pmd_widget_pm_details.END_DATE) AS stopdate, 
    pmd_widget_pm_details.PM_UNID AS pm_unid, 
    pmd_widget_pm_details.PMD_WIDGET_ID AS pmd_widget_id, 
    pmd_widget.STATUS AS pmd_widget_status
FROM 
    pmd_widget_pm_details
LEFT JOIN 
    pmd_widget 
ON 
    pmd_widget_pm_details.PMD_WIDGET_ID = pmd_widget.PMD_WIDGET_ID
     where pmd_widget_pm_details.site_unid =:siteUnid `,
};
+++++++++++++++++++++++++++++++
import { Test, TestingModule } from '@nestjs/testing';
import { PmSiteController } from './pmSite.controller';
import { PmSiteService } from './pmSite.service';
import { Response, Request } from 'express';
import { Logger } from '@nestjs/common';

// Mock the PmSiteService
jest.mock('./pmSite.service');

describe('PmSiteController', () => {
  let controller: PmSiteController;
  let pmSiteService: PmSiteService;
  let req: Request;
  let res: Response;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [PmSiteController],
      providers: [PmSiteService],
    }).compile();

    controller = module.get<PmSiteController>(PmSiteController);
    pmSiteService = module.get<PmSiteService>(PmSiteService);

    // Mocking the request and response objects
    req = {
      params: { siteUnid: '123' },
      headers: {},
    } as unknown as Request;
    res = {
      send: jest.fn(),
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    } as unknown as Response;
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  it('should return PM tasks for a site', async () => {
    const mockData = { pmlist: [{ listname: 'Task 1' }] };
    jest.spyOn(pmSiteService, 'PmData').mockResolvedValue(mockData);

    await controller.getPmBySite('123', req, res);

    expect(res.send).toHaveBeenCalledWith(mockData);
  });

  it('should return 204 if no tasks are found for the site', async () => {
    const mockData = { pmlist: [] };
    jest.spyOn(pmSiteService, 'PmData').mockResolvedValue(mockData);

    await controller.getPmBySite('123', req, res);

    expect(res.status).toHaveBeenCalledWith(204);
    expect(res.send).toHaveBeenCalled();
  });

  it('should handle errors and return 500 if PmData fails', async () => {
    const error = new Error('Service error');
    jest.spyOn(pmSiteService, 'PmData').mockRejectedValue(error);

    await controller.getPmBySite('123', req, res);

    expect(res.status).toHaveBeenCalledWith(500);
    expect(res.json).toHaveBeenCalledWith({
      message: 'Internal server error',
      error: error.message,
    });
  });

  it('should log information during request processing', async () => {
    const mockData = { pmlist: [{ listname: 'Task 1' }] };
    jest.spyOn(pmSiteService, 'PmData').mockResolvedValue(mockData);

    const logInfo = jest.spyOn(Logger, 'log');
    const logError = jest.spyOn(Logger, 'error');

    await controller.getPmBySite('123', req, res);

    expect(logInfo).toHaveBeenCalledWith('Processing request to fetch PM tasks for a specific site.');
    expect(logInfo).toHaveBeenCalledWith('Fetching PM tasks for site.', { siteUnid: '123' });
    expect(logError).not.toHaveBeenCalled();
  });

  it('should log error details if PmData fails', async () => {
    const error = new Error('Internal server error');
    jest.spyOn(pmSiteService, 'PmData').mockRejectedValue(error);

    const logError = jest.spyOn(Logger, 'error');

    await controller.getPmBySite('123', req, res);

    expect(logError).toHaveBeenCalledWith('Error while fetching PM tasks for the site.', {
      errorMessage: error.message,
      stack: error.stack,
    });
  });
});
_____________
import { Test, TestingModule } from '@nestjs/testing';
import { PmSiteService } from './pmSite.service';
import { PmSiteRepo } from './pmSite.repo';

// Mock the repository
jest.mock('./pmSite.repo');

describe('PmSiteService', () => {
  let pmSiteService: PmSiteService;
  let pmSiteRepo: PmSiteRepo;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [PmSiteService, PmSiteRepo],
    }).compile();

    pmSiteService = module.get<PmSiteService>(PmSiteService);
    pmSiteRepo = module.get<PmSiteRepo>(PmSiteRepo);
  });

  it('should be defined', () => {
    expect(pmSiteService).toBeDefined();
  });

  it('should call PmSiteRepo and return transformed data', async () => {
    const mockData = [
      {
        LIST_NAME: 'Task 1',
        FREQUENCY: 'Monthly',
        SWITCH_NAME: 'Switch A',
        SITE_NAME: 'Site A',
        SITE_UNID: '123',
        NUM_OF_TASKS: 5,
        NUM_OF_TASKS_DONE: 3,
        START_DATE: '2021-01-01',
        END_DATE: '2021-01-31',
        PM_UNID: '456',
        PMD_WIDGET_ID: '789',
        STATUS: 'Active',
      },
    ];

    jest.spyOn(pmSiteRepo, 'getPmBySite').mockResolvedValue(mockData);

    const result = await pmSiteService.PmData('123');

    expect(result).toEqual({
      pmlist: [
        {
          listname: 'Task 1',
          frequency: 'Monthly',
          switch: 'Switch A',
          site_name: 'Site A',
          site_unid: '123',
          numtasks: 5,
          numtasksdone: 3,
          startdate: '2021-01-01',
          stopdate: '2021-01-31',
          pm_unid: '456',
          pmd_widget_id: '789',
          pmd_widget_status: 'Active',
        },
      ],
    });
  });

  it('should throw an error if PmSiteRepo fails', async () => {
    const error = new Error('Repository error');
    jest.spyOn(pmSiteRepo, 'getPmBySite').mockRejectedValue(error);

    try {
      await pmSiteService.PmData('123');
    } catch (e) {
      expect(e.message).toBe('Repository error');
    }
  });
});
__________
import { Test, TestingModule } from '@nestjs/testing';
import { PmSiteRepo } from './pmSite.repo';
import { Oracle } from '../common/database/oracle';
import { queries } from './pmSite.qFactory';
import { reformatDates } from '../common/utils/common_util';

// Mock the Oracle service
jest.mock('../common/database/oracle');
jest.mock('../common/utils/common_util');

describe('PmSiteRepo', () => {
  let pmSiteRepo: PmSiteRepo;
  let oraUtil: Oracle;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [PmSiteRepo, Oracle],
    }).compile();

    pmSiteRepo = module.get<PmSiteRepo>(PmSiteRepo);
    oraUtil = module.get<Oracle>(Oracle);
  });

  it('should be defined', () => {
    expect(pmSiteRepo).toBeDefined();
  });

  it('should return data when getPmBySite is called', async () => {
    const mockData = {
      rows: [
        {
          LIST_NAME: 'Task 1',
          FREQUENCY: 'Monthly',
          SWITCH_NAME: 'Switch A',
          SITE_NAME: 'Site A',
          SITE_UNID: '123',
          NUM_OF_TASKS: 5,
          NUM_OF_TASKS_DONE: 3,
          START_DATE: '2021-01-01',
          END_DATE: '2021-01-31',
          PM_UNID: '456',
          PMD_WIDGET_ID: '789',
          STATUS: 'Active',
        },
      ],
    };

    jest.spyOn(oraUtil, 'executeQuery').mockResolvedValue(mockData);
    jest.spyOn(reformatDates, 'reformatDates').mockReturnValue('2021-01-01');

    const result = await pmSiteRepo.getPmBySite('123');
    expect(result).toEqual([
      {
        listname: 'Task 1',
        frequency: 'Monthly',
        switch: 'Switch A',
        site_name: 'Site A',
        site_unid: '123',
        numtasks: 5,
        numtasksdone: 3,
        startdate: '2021-01-01',
        stopdate: '2021-01-31',
        pm_unid: '456',
        pmd_widget_id: '789',
        pmd_widget_status: 'Active',
      },
    ]);
  });

  it('should throw an error if there is a problem retrieving data', async () => {
    jest.spyOn(oraUtil, 'executeQuery').mockRejectedValue(new Error('Database error'));

    try {
      await pmSiteRepo.getPmBySite('123');
    } catch (error) {
      expect(error.message).toBe('Database error');
    }
  });
});
