import { Test, TestingModule } from '@nestjs/testing';
import { UpdateTaskController } from './UpdateTask.controller';
import { UpdateTaskService } from './UpdateTask.service';
import { Request, Response } from 'express';

describe('UpdateTaskController', () => {
  let controller: UpdateTaskController;
  let service: UpdateTaskService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [UpdateTaskController],
      providers: [
        {
          provide: UpdateTaskService,
          useValue: { updateDetails: jest.fn() },
        },
      ],
    }).compile();
    
    controller = module.get<UpdateTaskController>(UpdateTaskController);
    service = module.get<UpdateTaskService>(UpdateTaskService);
  });

  describe('putTaskReading', () => {
    it('should update task and return response', async () => {
      const req = { body: { pm: { pmtasks: [] } } } as Request;
      const res = { send: jest.fn() } as unknown as Response;
      const result = { message: 'Readings added/updated successfully', data: req.body };
      jest.spyOn(service, 'updateDetails').mockResolvedValue(result);
      await controller.putTaskReading(req, res);
      expect(service.updateDetails).toHaveBeenCalledWith(req);
      expect(res.send).toHaveBeenCalledWith(result);
    });

    it('should handle errors', async () => {
      const req = { body: { pm: { pmtasks: [] } } } as Request;
      const res = { status: jest.fn().mockReturnThis(), json: jest.fn() } as unknown as Response;
      jest.spyOn(service, 'updateDetails').mockRejectedValue(new Error('Error'));
      await controller.putTaskReading(req, res);
      expect(service.updateDetails).toHaveBeenCalledWith(req);
      expect(res.status).toHaveBeenCalledWith(500);
      expect(res.json).toHaveBeenCalledWith(expect.any(Error));
    });

    it('should handle malformed request', async () => {
      const req = { body: {} } as Request; // No pm or pmtasks
      const res = { status: jest.fn().mockReturnThis(), json: jest.fn() } as unknown as Response;
      await controller.putTaskReading(req, res);
      expect(res.status).toHaveBeenCalledWith(400);
      expect(res.json).toHaveBeenCalledWith({ message: 'Malformed request' });
    });

    it('should handle unexpected errors gracefully', async () => {
      const req = { body: { pm: { pmtasks: [] } } } as Request;
      const res = { status: jest.fn().mockReturnThis(), json: jest.fn() } as unknown as Response;
      jest.spyOn(service, 'updateDetails').mockRejectedValue(new Error('Unexpected error'));
      await controller.putTaskReading(req, res);
      expect(service.updateDetails).toHaveBeenCalledWith(req);
      expect(res.status).toHaveBeenCalledWith(500);
      expect(res.json).toHaveBeenCalledWith(expect.objectContaining({ message: 'Unexpected error' }));
    });
  });
});
======================
import { Test, TestingModule } from '@nestjs/testing';
import UpdateTaskRepo from './UpdateTask.repo';
import Oracle from '../common/database/oracle';

describe('UpdateTaskRepo', () => {
  let repo: UpdateTaskRepo;
  let oraUtil: Oracle;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UpdateTaskRepo,
        {
          provide: Oracle,
          useValue: { executeQuery: jest.fn() },
        },
      ],
    }).compile();
    
    repo = module.get<UpdateTaskRepo>(UpdateTaskRepo);
    oraUtil = module.get<Oracle>(Oracle);
  });

  describe('updatetask', () => {
    it('should execute query for each task and return affected rows', async () => {
      const req = {
        body: {
          pm: {
            pmtasks: [{ status: 'completed', task_unid: 1 }],
          },
        },
      };
      const mockQuery = `UPDATE opspm.pm_location_task 
        SET STATUS_ID = :STATUS,
        META_LAST_UPDATED_DATE = sys_extract_utc(systimestamp),
        META_LAST_UPDATED_BY = :META_CREATED_BY
        WHERE META_UNIVERSAL_ID = :TASK_UNID`;
      const result = { rowsaffected: 1 };
      jest.spyOn(oraUtil, 'executeQuery').mockResolvedValue(result);

      const affectedRows = await repo.updatetask(req);

      expect(oraUtil.executeQuery).toHaveBeenCalledWith(mockQuery, expect.any(Array));
      expect(affectedRows).toBe(1);
    });

    it('should handle multiple tasks and return total affected rows', async () => {
      const req = {
        body: {
          pm: {
            pmtasks: [
              { status: 'completed', task_unid: 1 },
              { status: 'in-progress', task_unid: 2 },
            ],
          },
        },
      };
      const mockQuery = `UPDATE opspm.pm_location_task 
        SET STATUS_ID = :STATUS,
        META_LAST_UPDATED_DATE = sys_extract_utc(systimestamp),
        META_LAST_UPDATED_BY = :META_CREATED_BY
        WHERE META_UNIVERSAL_ID = :TASK_UNID`;
      const result = { rowsaffected: 2 };
      jest.spyOn(oraUtil, 'executeQuery').mockResolvedValue(result);

      const affectedRows = await repo.updatetask(req);

      expect(oraUtil.executeQuery).toHaveBeenCalledWith(mockQuery, expect.any(Array));
      expect(affectedRows).toBe(2);
    });

    it('should return 0 affected rows if no tasks are provided', async () => {
      const req = { body: { pm: { pmtasks: [] } } };

      const affectedRows = await repo.updatetask(req);

      expect(affectedRows).toBe(0);
      expect(oraUtil.executeQuery).not.toHaveBeenCalled();
    });

    it('should throw error if executeQuery fails', async () => {
      const req = {
        body: {
          pm: {
            pmtasks: [{ status: 'completed', task_unid: 1 }],
          },
        },
      };
      jest.spyOn(oraUtil, 'executeQuery').mockRejectedValue(new Error('DB Error'));

      await expect(repo.updatetask(req)).rejects.toThrow('DB Error');
    });

    it('should throw error for malformed request', async () => {
      const req = { body: { pm: {} } }; // No pmtasks

      await expect(repo.updatetask(req)).rejects.toThrow('Malformed request');
    });

    it('should throw error if task does not have status or task_unid', async () => {
      const req = {
        body: {
          pm: {
            pmtasks: [{ status: undefined, task_unid: undefined }],
          },
        },
      };

      await expect(repo.updatetask(req)).rejects.toThrow('Malformed request');
    });

    it('should handle a large number of tasks', async () => {
      const tasks = Array.from({ length: 1000 }, (_, i) => ({
        status: 'completed',
        task_unid: i + 1,
      }));
      const req = {
        body: {
          pm: {
            pmtasks: tasks,
          },
        },
      };
      const mockQuery = `UPDATE opspm.pm_location_task 
        SET STATUS_ID = :STATUS,
        META_LAST_UPDATED_DATE = sys_extract_utc(systimestamp),
        META_LAST_UPDATED_BY = :META_CREATED_BY
        WHERE META_UNIVERSAL_ID = :TASK_UNID`;
      const result = { rowsaffected: tasks.length };
      jest.spyOn(oraUtil, 'executeQuery').mockResolvedValue(result);

      const affectedRows = await repo.updatetask(req);

      expect(oraUtil.executeQuery).toHaveBeenCalledWith(mockQuery, expect.any(Array));
      expect(affectedRows).toBe(tasks.length);
    });
  });
});
========================
import { Test, TestingModule } from '@nestjs/testing';
import { UpdateTaskService } from './UpdateTask.service';
import UpdateTaskRepo from './UpdateTask.repo';

describe('UpdateTaskService', () => {
  let service: UpdateTaskService;
  let repo: UpdateTaskRepo;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UpdateTaskService,
        {
          provide: UpdateTaskRepo,
          useValue: { updatetask: jest.fn() },
        },
      ],
    }).compile();
    
    service = module.get<UpdateTaskService>(UpdateTaskService);
    repo = module.get<UpdateTaskRepo>(UpdateTaskRepo);
  });

  describe('updateDetails', () => {
    it('should call repo and return message', async () => {
      const req = { body: { pm: { pmtasks: [] } } };
      const result = { rowsaffected: 1 };
      jest.spyOn(repo, 'updatetask').mockResolvedValue(result);
      const response = await service.updateDetails(req);
      expect(repo.updatetask).toHaveBeenCalledWith(req);
      expect(response).toEqual({
        message: 'Readings added/updated successfully',
        data: req.body,
      });
    });

    it('should throw error if repo fails', async () => {
      const req = { body: { pm: { pmtasks: [] } } };
      jest.spyOn(repo, 'updatetask').mockRejectedValue(new Error('Error'));
      await expect(service.updateDetails(req)).rejects.toThrow('Error');
    });

    it('should throw error if req body is malformed', async () => {
      const req = { body: {} }; // Missing pm
      await expect(service.updateDetails(req)).rejects.toThrow('Malformed request');
    });
  });
});
