import { Controller, Param, Put, Req, Res } from '@nestjs/common';
import {UpdateTaskService} from './UpdateTask.service';
import { ApiTags } from '@nestjs/swagger';
import logger from '../common/logger/logger';
import { Request, Response } from 'express';




const config = require('config');
@Controller('ioppm')
@ApiTags('Default')

export class UpdateTaskController {
    constructor(private readonly UpdateTaskService: UpdateTaskService) {}

     // PM put Genreading
  @Put('/update/pmtasks')
  async putTaskReading(@Req() req: Request, @Res() res: Response) {
    try {
        // const upgenData = config.upgenData;
        // console.log(upgenData)
        const data: any = await this.UpdateTaskService.updateDetails(req);
      return res.send(data);
    } catch (err) {
      logger.error('Error in updating genreading', err);
      return res.status(500).json(err);
    }
  }
}

========================================
import { Injectable } from '@nestjs/common';
import  Oracle  from '../common/database/oracle';
import { queries } from './UpdateTask.qFactory';

@Injectable()
export default class UpdateTaskRepo {
  constructor(private oraUtil: Oracle) {}

  async updatetask(req: any){
    try{
       
    const query = queries.updatetask;
    const pmtasks = req.body.pm.pmtasks;
    console.log(pmtasks)
    const META_CREATED_BY= req.body.pm.userid;
    var result;
    for (let task of pmtasks) {
        let status=task['status'];
        let task_unid = task['task_unid'];
        const qParams=[status,META_CREATED_BY,task_unid];
        var data: any=await this.oraUtil.executeQuery(query,qParams);
        result=data.rowsaffected;
    }
    
    return result;
    } catch (error) {
      throw error;
    }
}
}
=========================
import { Injectable } from '@nestjs/common';
import  UpdateTaskRepo from  './UpdateTask.repo';


@Injectable()
export class UpdateTaskService {

  constructor(private UpdateTaskRepo: UpdateTaskRepo) {}
  async updateDetails(req) {
      try {
        const data = await this.UpdateTaskRepo.updatetask(req);
        const data_json= {"message": "Readings added/updated successfully","data": req.body}
        return data_json;
      } catch (error) {
        throw error;
      }
}
    }
==============
export const queries={
    updatetask: `UPDATE opspm.pm_location_task 
    SET STATUS_ID = :STATUS,
    META_LAST_UPDATED_DATE = sys_extract_utc(systimestamp),
    META_LAST_UPDATED_BY = :META_CREATED_BY
    WHERE META_UNIVERSAL_ID = :TASK_UNID`
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++
// updateTask.repo.spec.ts
import { Test, TestingModule } from '@nestjs/testing';
import UpdateTaskRepo from './UpdateTask.repo';
import Oracle from '../common/database/oracle';

describe('UpdateTaskRepo', () => {
  let repo: UpdateTaskRepo;
  let oraUtil: Oracle;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UpdateTaskRepo,
        {
          provide: Oracle,
          useValue: {
            executeQuery: jest.fn(),
          },
        },
      ],
    }).compile();

    repo = module.get<UpdateTaskRepo>(UpdateTaskRepo);
    oraUtil = module.get<Oracle>(Oracle);
  });

  it('should be defined', () => {
    expect(repo).toBeDefined();
  });

  describe('updatetask', () => {
    it('should update tasks and return affected rows', async () => {
      const req = {
        body: {
          pm: {
            pmtasks: [{ status: 'completed', task_unid: '1' }],
            userid: 'user123',
          },
        },
      };

      oraUtil.executeQuery = jest.fn().mockResolvedValue({ rowsaffected: 1 });

      const result = await repo.updatetask(req);
      expect(result).toBe(1);
      expect(oraUtil.executeQuery).toHaveBeenCalledTimes(1);
    });

    it('should throw an error if the database call fails', async () => {
      const req = { body: { pm: { pmtasks: [] } } };

      oraUtil.executeQuery = jest.fn().mockRejectedValue(new Error('DB Error'));

      await expect(repo.updatetask(req)).rejects.toThrow('DB Error');
    });
  });
});
=============
// updateTask.service.spec.ts
import { Test, TestingModule } from '@nestjs/testing';
import { UpdateTaskService } from './UpdateTask.service';
import UpdateTaskRepo from './UpdateTask.repo';

describe('UpdateTaskService', () => {
  let service: UpdateTaskService;
  let repo: UpdateTaskRepo;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UpdateTaskService,
        {
          provide: UpdateTaskRepo,
          useValue: {
            updatetask: jest.fn(),
          },
        },
      ],
    }).compile();

    service = module.get<UpdateTaskService>(UpdateTaskService);
    repo = module.get<UpdateTaskRepo>(UpdateTaskRepo);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  describe('updateDetails', () => {
    it('should call updatetask and return success message', async () => {
      const req = { body: { pm: { pmtasks: [] } } };
      repo.updatetask = jest.fn().mockResolvedValue(1);

      const result = await service.updateDetails(req);
      expect(result).toEqual({
        message: 'Readings added/updated successfully',
        data: req.body,
      });
      expect(repo.updatetask).toHaveBeenCalledWith(req);
    });

    it('should throw an error if updatetask fails', async () => {
      const req = { body: { pm: { pmtasks: [] } } };
      repo.updatetask = jest.fn().mockRejectedValue(new Error('Repo Error'));

      await expect(service.updateDetails(req)).rejects.toThrow('Repo Error');
    });
  });
});
============
// updateTask.controller.spec.ts
import { Test, TestingModule } from '@nestjs/testing';
import { UpdateTaskController } from './UpdateTask.controller';
import { UpdateTaskService } from './UpdateTask.service';
import { Response } from 'express';

describe('UpdateTaskController', () => {
  let controller: UpdateTaskController;
  let service: UpdateTaskService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [UpdateTaskController],
      providers: [
        {
          provide: UpdateTaskService,
          useValue: {
            updateDetails: jest.fn(),
          },
        },
      ],
    }).compile();

    controller = module.get<UpdateTaskController>(UpdateTaskController);
    service = module.get<UpdateTaskService>(UpdateTaskService);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  describe('putTaskReading', () => {
    it('should call updateDetails and return data', async () => {
      const req = { body: { pm: { pmtasks: [] } } };
      const res = { send: jest.fn() };
      service.updateDetails = jest.fn().mockResolvedValue({ message: 'Success' });

      await controller.putTaskReading(req, res);
      expect(service.updateDetails).toHaveBeenCalledWith(req);
      expect(res.send).toHaveBeenCalledWith({ message: 'Success' });
    });

    it('should handle errors and return status 500', async () => {
      const req = { body: { pm: { pmtasks: [] } } };
      const res = { status: jest.fn().mockReturnThis(), json: jest.fn() };
      service.updateDetails = jest.fn().mockRejectedValue(new Error('Error'));

      await controller.putTaskReading(req, res);
      expect(service.updateDetails).toHaveBeenCalledWith(req);
      expect(res.status).toHaveBeenCalledWith(500);
      expect(res.json).toHaveBeenCalledWith(expect.any(Error));
    });
  });
});
